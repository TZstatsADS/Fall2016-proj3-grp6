"Total Varieties:", total.varieties),
xaxis = x.axis, yaxis = y.axis)
}
plot.tree.evolution.histogram(2009)
plot.tree.evolution.histogram <- function(starting.year){
experiment.data.tree.year <- experiment.data.tree[experiment.data.tree$STARTING_YEAR == starting.year,]
experiment.data.tree.year.uniques <- unique(experiment.data.tree.year[c("YEAR", "VARIETY")])
total.varieties <- nrow(experiment.data.tree.year.uniques[experiment.data.tree.year.uniques$YEAR == starting.year,])
p <- plot_ly(data=experiment.data.tree.year.uniques, x = YEAR, type = "histogram")
x.axis <- list(title = "Year")
y.axis <- list(title = "Count of Varieties")
p %>% layout(title = paste("Count of Varieties per year. <br> Starting year:",starting.year,
"Total Varieties:", total.varieties),
xaxis = x.axis, yaxis = y.axis)
}
plot.tree.evolution.histogram(2009)
plot.tree.evolution.histogram <- function(starting.year){
experiment.data.tree.year <- experiment.data.tree[experiment.data.tree$STARTING_YEAR == starting.year,]
experiment.data.tree.year.uniques <- unique(experiment.data.tree.year[c("YEAR", "VARIETY")])
total.varieties <- nrow(experiment.data.tree.year.uniques[experiment.data.tree.year.uniques$YEAR == starting.year,])
p <- plot_ly(data=experiment.data.tree.year.uniques, x = YEAR, type = "histogram")
x.axis <- list(title = "Year")
y.axis <- list(title = "Count of Varieties")
p %>% layout(title = paste.0("Count of Varieties per year. <br> Starting year: ",starting.year,
". Total Varieties: ", total.varieties),
xaxis = x.axis, yaxis = y.axis)
}
plot.tree.evolution.histogram(2009)
plot.tree.evolution.histogram <- function(starting.year){
experiment.data.tree.year <- experiment.data.tree[experiment.data.tree$STARTING_YEAR == starting.year,]
experiment.data.tree.year.uniques <- unique(experiment.data.tree.year[c("YEAR", "VARIETY")])
total.varieties <- nrow(experiment.data.tree.year.uniques[experiment.data.tree.year.uniques$YEAR == starting.year,])
p <- plot_ly(data=experiment.data.tree.year.uniques, x = YEAR, type = "histogram")
x.axis <- list(title = "Year")
y.axis <- list(title = "Count of Varieties")
p %>% layout(title = paste0("Count of Varieties per year. <br> Starting year: ",starting.year,
". Total Varieties: ", total.varieties),
xaxis = x.axis, yaxis = y.axis)
}
plot.tree.evolution.histogram(2009)
plot.tree.evolution.histogram(2009)
plot.tree.evolution.histogram(2010)
years <- seq(2009, 2014)
years <- seq(2009, 2014)
for(year in years){
plot.tree.evolution.histogram(year)
}
plot.tree.evolution.histogram <- function(starting.year){
experiment.data.tree.year <- experiment.data.tree[experiment.data.tree$STARTING_YEAR == starting.year,]
experiment.data.tree.year.uniques <- unique(experiment.data.tree.year[c("YEAR", "VARIETY")])
total.varieties <- nrow(experiment.data.tree.year.uniques[experiment.data.tree.year.uniques$YEAR == starting.year,])
p <- plot_ly(data=experiment.data.tree.year.uniques, x = YEAR, type = "histogram")
x.axis <- list(title = "Year")
y.axis <- list(title = "Count of Varieties")
p %>% layout(title = paste0("Count of Varieties per year. <br> Starting year: ",starting.year,
". Total Varieties: ", total.varieties),
xaxis = x.axis, yaxis = y.axis)
}
years <- seq(2009, 2014)
for(year in years){
plot.tree.evolution.histogram(year)
}
plot.tree.evolution.histogram(years[1])
years <- seq(2009, 2014)
for(year in years){
print(year)
plot.tree.evolution.histogram(year)
}
plot.tree.evolution.histogram <- function(starting.year){
experiment.data.tree.year <- experiment.data.tree[experiment.data.tree$STARTING_YEAR == starting.year,]
experiment.data.tree.year.uniques <- unique(experiment.data.tree.year[c("YEAR", "VARIETY")])
total.varieties <- nrow(experiment.data.tree.year.uniques[experiment.data.tree.year.uniques$YEAR == starting.year,])
p <- plot_ly(data=experiment.data.tree.year.uniques, x = YEAR, type = "histogram")
x.axis <- list(title = "Year")
y.axis <- list(title = "Count of Varieties")
p %>% layout(title = paste0("Count of Varieties per year. <br> Starting year: ",starting.year,
". Total Varieties: ", total.varieties),
xaxis = x.axis, yaxis = y.axis)
p
}
years <- seq(2009, 2014)
for(year in years){
print(year)
plot.tree.evolution.histogram(year)
}
plot.tree.evolution.histogram(2009)
plot.tree.evolution.histogram(2010)
plot.tree.evolution.histogram(2011)
plot.tree.evolution.histogram(2012)
plot.tree.evolution.histogram(2013)
plot.tree.evolution.histogram(2014)
plot.tree.evolution.histogram <- function(starting.year){
experiment.data.tree.year <- experiment.data.tree[experiment.data.tree$STARTING_YEAR == starting.year,]
experiment.data.tree.year.uniques <- unique(experiment.data.tree.year[c("YEAR", "VARIETY")])
total.varieties <- nrow(experiment.data.tree.year.uniques[experiment.data.tree.year.uniques$YEAR == starting.year,])
p <- plot_ly(data=experiment.data.tree.year.uniques, x = YEAR, type = "histogram")
x.axis <- list(title = "Year")
y.axis <- list(title = "Count of Varieties")
p %>% layout(title = paste0("Count of Varieties per year. <br> Starting year: ",starting.year,
". Total Varieties: ", total.varieties),
xaxis = x.axis, yaxis = y.axis)
}
plot.tree.evolution.histogram(2009)
plot.tree.evolution.histogram(2010)
plot.tree.evolution.histogram(2011)
plot.tree.evolution.histogram(2012)
plot.tree.evolution.histogram(2013)
plot.tree.evolution.histogram(2014)
```{r, include=FALSE, fig.align='center'}
plot.tree.evolution.histogram <- function(starting.year){
experiment.data.tree.year <- experiment.data.tree[experiment.data.tree$STARTING_YEAR == starting.year,]
experiment.data.tree.year.uniques <- unique(experiment.data.tree.year[c("YEAR", "VARIETY")])
total.varieties <- nrow(experiment.data.tree.year.uniques[experiment.data.tree.year.uniques$YEAR == starting.year,])
p <- plot_ly(data=experiment.data.tree.year.uniques, x = YEAR, type = "histogram")
x.axis <- list(title = "Year")
y.axis <- list(title = "Count of Varieties")
p %>% layout(title = paste0("Count of Varieties per year. <br> Starting year: ",starting.year,
". Total Varieties: ", total.varieties),
xaxis = x.axis, yaxis = y.axis)
}
plot.tree.evolution.histogram(2009)
plot.tree.evolution.histogram(2010)
plot.tree.evolution.histogram(2011)
plot.tree.evolution.histogram(2012)
plot.tree.evolution.histogram(2013)
plot.tree.evolution.histogram(2014)
plot.tree.evolution.histogram(2009)
plot.tree.evolution.histogram(2009)
plot.tree.evolution.histogram(2010)
plot.tree.evolution.histogram(2011)
plot.tree.evolution.histogram(2012)
plot.tree.evolution.histogram(2013)
plot.tree.evolution.histogram(2014)
plot.tree.evolution.histogram(2009)
plot.tree.evolution.histogram(2010)
plot.tree.evolution.histogram(2011)
plot.tree.evolution.histogram(2012)
plot.tree.evolution.histogram(2013)
plot.tree.evolution.histogram(2014)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(DT)
library(readr)
library(plotly)
experiment.data.tree <- read_csv("../data/exp_data_final.csv",
col_types = cols(
LOCATION = col_character()
))
plot.tree.evolution.histogram <- function(starting.year){
experiment.data.tree.year <- experiment.data.tree[experiment.data.tree$STARTING_YEAR == starting.year,]
experiment.data.tree.year.uniques <- unique(experiment.data.tree.year[c("YEAR", "VARIETY")])
total.varieties <- nrow(experiment.data.tree.year.uniques[experiment.data.tree.year.uniques$YEAR == starting.year,])
p <- plot_ly(data=experiment.data.tree.year.uniques, x = YEAR, type = "histogram")
x.axis <- list(title = "Year")
y.axis <- list(title = "Count of Varieties")
p %>% layout(title = paste0("Count of Unique Varieties Tested per year. <br> Starting year: ",starting.year,
". Total Varieties: ", total.varieties),
xaxis = x.axis, yaxis = y.axis)
}
plot.tree.evolution.histogram(2009)
plot.tree.evolution.histogram(2010)
plot.tree.evolution.histogram(2011)
plot.tree.evolution.histogram(2012)
plot.tree.evolution.histogram(2013)
plot.tree.evolution.histogram(2014)
plot.tree.evolution.histogram <- function(starting.year){
experiment.data.tree.year <- experiment.data.tree[experiment.data.tree$STARTING_YEAR == starting.year,]
experiment.data.tree.year.uniques <- unique(experiment.data.tree.year[c("YEAR", "VARIETY", "QUALIFIED")])
total.varieties <- nrow(experiment.data.tree.year.uniques[experiment.data.tree.year.uniques$YEAR == starting.year,])
p <- plot_ly(data=experiment.data.tree.year.uniques, x = YEAR, color = QUALIFIED, type = "histogram")
x.axis <- list(title = "Year")
y.axis <- list(title = "Count of Varieties")
p %>% layout(title = paste0("Count of Unique Varieties Tested per year. <br> Starting year: ",starting.year,
". Total Varieties: ", total.varieties),
xaxis = x.axis, yaxis = y.axis)
}
plot.tree.evolution.histogram(2009)
plot.tree.evolution.histogram <- function(starting.year){
experiment.data.tree.year <- experiment.data.tree[experiment.data.tree$STARTING_YEAR == starting.year,]
experiment.data.tree.year.uniques <- unique(experiment.data.tree.year[c("YEAR", "VARIETY", "QUALIFIED")])
total.varieties <- nrow(experiment.data.tree.year.uniques[experiment.data.tree.year.uniques$YEAR == starting.year,])
p <- plot_ly(data=experiment.data.tree.year.uniques, x = YEAR, color = QUALIFIED, type = "histogram")
x.axis <- list(title = "Year")
y.axis <- list(title = "Count of Varieties")
p %>% layout(title = paste0("Count of Unique Varieties Tested per year. <br> Starting year: ",starting.year,
". Total Varieties: ", total.varieties),
xaxis = x.axis,
yaxis = y.axis,
barmode = "stack")
}
plot.tree.evolution.histogram(2009)
plot.tree.evolution.histogram(2009)
plot.tree.evolution.histogram(2010)
plot.tree.evolution.histogram(2011)
plot.tree.evolution.histogram(2012)
plot.tree.evolution.histogram(2013)
plot.tree.evolution.histogram(2014)
pts_chunk$set(out.width='750px', dpi=200)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
knitr::opts_chunk$set(echo = TRUE)
pts_chunk$set(out.width='750px', dpi=200)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(out.width='750px', dpi=200)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(out.width='750px', dpi=200)
library(dplyr)
library(DT)
library(readr)
library(plotly)
experiment.data.tree <- read_csv("../data/exp_data_final.csv",
col_types = cols(
LOCATION = col_character()
))
plot.tree.evolution.histogram <- function(starting.year){
experiment.data.tree.year <- experiment.data.tree[experiment.data.tree$STARTING_YEAR == starting.year,]
experiment.data.tree.year.uniques <- unique(experiment.data.tree.year[c("YEAR", "VARIETY", "QUALIFIED")])
total.varieties <- nrow(experiment.data.tree.year.uniques[experiment.data.tree.year.uniques$YEAR == starting.year,])
p <- plot_ly(data=experiment.data.tree.year.uniques, x = YEAR, color = QUALIFIED, type = "histogram")
x.axis <- list(title = "Year")
y.axis <- list(title = "Count of Varieties")
p %>% layout(title = paste0("Count of Unique Varieties Tested per year. <br> Starting year: ",starting.year,
". Total Varieties: ", total.varieties),
xaxis = x.axis,
yaxis = y.axis,
barmode = "stack")
}
plot.tree.evolution.histogram(2009)
plot.tree.evolution.histogram(2010)
plot.tree.evolution.histogram(2011)
plot.tree.evolution.histogram(2012)
plot.tree.evolution.histogram(2013)
plot.tree.evolution.histogram(2014)
plot.tree.evolution.histogram <- function(starting.year){
experiment.data.tree.year <- experiment.data.tree[experiment.data.tree$STARTING_YEAR == starting.year,]
experiment.data.tree.year.uniques <- unique(experiment.data.tree.year[c("YEAR", "VARIETY", "QUALIFIED")])
total.varieties <- nrow(experiment.data.tree.year.uniques[experiment.data.tree.year.uniques$YEAR == starting.year,])
datatable(experiment.data.tree.year.uniques)
p <- plot_ly(data=experiment.data.tree.year.uniques, x = YEAR, color = QUALIFIED, type = "histogram")
x.axis <- list(title = "Year")
y.axis <- list(title = "Count of Varieties")
p %>% layout(title = paste0("Count of Unique Varieties Tested per year. <br> Starting year: ",starting.year,
". Total Varieties: ", total.varieties),
xaxis = x.axis,
yaxis = y.axis,
barmode = "stack")
}
plot.tree.evolution.histogram <- function(starting.year){
experiment.data.tree.year <- experiment.data.tree[experiment.data.tree$STARTING_YEAR == starting.year,]
experiment.data.tree.year.uniques <- unique(experiment.data.tree.year[c("YEAR", "VARIETY", "QUALIFIED")])
total.varieties <- nrow(experiment.data.tree.year.uniques[experiment.data.tree.year.uniques$YEAR == starting.year,])
p <- plot_ly(data=experiment.data.tree.year.uniques, x = YEAR, color = QUALIFIED, type = "histogram")
x.axis <- list(title = "Year")
y.axis <- list(title = "Count of Varieties")
p %>% layout(title = paste0("Count of Unique Varieties Tested per year. <br> Starting year: ",starting.year,
". Total Varieties: ", total.varieties),
xaxis = x.axis,
yaxis = y.axis,
barmode = "stack")
datatable(experiment.data.tree.year.uniques)
}
plot.tree.evolution.histogram(2009)
plot.tree.evolution.histogram(2010)
plot.tree.evolution.histogram(2011)
plot.tree.evolution.histogram(2012)
plot.tree.evolution.histogram(2013)
plot.tree.evolution.histogram(2014)
plot.tree.evolution.histogram <- function(starting.year){
experiment.data.tree.year <- experiment.data.tree[experiment.data.tree$STARTING_YEAR == starting.year,]
experiment.data.tree.year.uniques <- unique(experiment.data.tree.year[c("YEAR", "VARIETY", "QUALIFIED")])
total.varieties <- nrow(experiment.data.tree.year.uniques[experiment.data.tree.year.uniques$YEAR == starting.year,])
p <- plot_ly(data=experiment.data.tree.year.uniques, x = YEAR, color = QUALIFIED, type = "histogram")
x.axis <- list(title = "Year")
y.axis <- list(title = "Count of Varieties")
p %>% layout(title = paste0("Count of Unique Varieties Tested per year. <br> Starting year: ",starting.year,
". Total Varieties: ", total.varieties),
xaxis = x.axis,
yaxis = y.axis,
barmode = "stack")
p
datatable(experiment.data.tree.year.uniques)
}
plot.tree.evolution.histogram(2009)
plot.tree.evolution.histogram(2010)
plot.tree.evolution.histogram(2011)
plot.tree.evolution.histogram(2012)
plot.tree.evolution.histogram(2013)
plot.tree.evolution.histogram(2014)
plot.tree.evolution.histogram(2009)
plot.tree.evolution.histogram <- function(starting.year){
experiment.data.tree.year <- experiment.data.tree[experiment.data.tree$STARTING_YEAR == starting.year,]
experiment.data.tree.year.uniques <- unique(experiment.data.tree.year[c("YEAR", "VARIETY", "QUALIFIED")])
total.varieties <- nrow(experiment.data.tree.year.uniques[experiment.data.tree.year.uniques$YEAR == starting.year,])
p <- plot_ly(data=experiment.data.tree.year.uniques, x = YEAR, color = QUALIFIED, type = "histogram")
x.axis <- list(title = "Year")
y.axis <- list(title = "Count of Varieties")
p %>% layout(title = paste0("Count of Unique Varieties Tested per year. <br> Starting year: ",starting.year,
". Total Varieties: ", total.varieties),
xaxis = x.axis,
yaxis = y.axis,
barmode = "stack")
dt <- datatable(experiment.data.tree.year.uniques)
htmltools::tagList(list(as.widget(p), as.widget(dt)))
}
plot.tree.evolution.histogram(2009)
plot.tree.evolution.histogram(2009)
plot.tree.evolution.histogram(2010)
plot.tree.evolution.histogram(2011)
plot.tree.evolution.histogram(2012)
plot.tree.evolution.histogram(2013)
plot.tree.evolution.histogram(2014)
plot.tree.evolution.histogram <- function(starting.year){
experiment.data.tree.year <- experiment.data.tree[experiment.data.tree$STARTING_YEAR == starting.year,]
experiment.data.tree.year.uniques <- unique(experiment.data.tree.year[c("YEAR", "VARIETY", "QUALIFIED")])
total.varieties <- nrow(experiment.data.tree.year.uniques[experiment.data.tree.year.uniques$YEAR == starting.year,])
p <- plot_ly(data=experiment.data.tree.year.uniques, x = YEAR, color = QUALIFIED, type = "histogram")
x.axis <- list(title = "Year")
y.axis <- list(title = "Count of Varieties")
p <- p %>% layout(title = paste0("Count of Unique Varieties Tested per year. <br> Starting year: ",starting.year,
". Total Varieties: ", total.varieties),
xaxis = x.axis,
yaxis = y.axis,
barmode = "stack")
dt <- datatable(experiment.data.tree.year.uniques)
htmltools::tagList(list(as.widget(p), as.widget(dt)))
}
plot.tree.evolution.histogram(2009)
plot.tree.evolution.histogram(2010)
plot.tree.evolution.histogram(2011)
plot.tree.evolution.histogram(2012)
plot.tree.evolution.histogram(2013)
plot.tree.evolution.histogram(2014)
plot.tree.evolution.histogram <- function(starting.year){
experiment.data.tree.year <- experiment.data.tree[experiment.data.tree$STARTING_YEAR == starting.year,]
experiment.data.tree.year.uniques <- unique(experiment.data.tree.year[c("YEAR", "VARIETY", "QUALIFIED", "CHECK")])
total.varieties <- nrow(experiment.data.tree.year.uniques[experiment.data.tree.year.uniques$YEAR == starting.year,])
p <- plot_ly(data=experiment.data.tree.year.uniques, x = YEAR, color = QUALIFIED, type = "histogram")
x.axis <- list(title = "Year")
y.axis <- list(title = "Count of Varieties")
p <- p %>% layout(title = paste0("Count of Unique Varieties Tested per year. <br> Starting year: ",starting.year,
". Total Varieties: ", total.varieties),
xaxis = x.axis,
yaxis = y.axis,
barmode = "stack")
dt <- datatable(experiment.data.tree.year.uniques)
htmltools::tagList(list(as.widget(p), as.widget(dt)))
}
plot.tree.evolution.histogram(2009)
plot.tree.evolution.histogram(2010)
plot.tree.evolution.histogram(2011)
plot.tree.evolution.histogram(2012)
plot.tree.evolution.histogram(2013)
plot.tree.evolution.histogram(2014)
View(experiment.data.tree)
data.uniques.start.stage <-  unique(experiment.data.tree.year[c("STARTING_YEAR", "STAGE", "VARIETY", "CHECK")])
View(data.uniques.start.stage)
data.uniques.start.stage <-  unique(experiment.data.tree[c("STARTING_YEAR", "STAGE", "VARIETY", "CHECK")])
View(data.uniques.start.stage)
uniques.count <- group_by(experiment.data.tree, STARTING_YEAR, STAGE, VARIETY)
uniques.count <- summarise(uniques.count, count.varieties = n_distinct(VARIETY))
uniques.count <- group_by(experiment.data.tree, STARTING_YEAR, STAGE)
uniques.count <- summarise(uniques.count, count.varieties = n_distinct(VARIETY))
table(uniques.count)
View(uniques.count)
library(reshape2)
View(uniques.count)
uniques.count.transpose <- dcast(uniques.count, STARTING_YEAR ~ STAGE, value.var = "count.varieties")
View(uniques.count.transpose)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(out.width='750px', dpi=200)
library(dplyr)
library(DT)
library(readr)
library(plotly)
library(reshape2)
experiment.data.tree <- read_csv("../data/exp_data_final.csv",
col_types = cols(
LOCATION = col_character()
))
uniques.count <- group_by(experiment.data.tree, STARTING_YEAR, STAGE)
uniques.count <- summarise(uniques.count, count.varieties = n_distinct(VARIETY))
uniques.count.transpose <- dcast(uniques.count, STARTING_YEAR ~ STAGE, value.var = "count.varieties")
datatable(uniques.count.transpose)
plot.tree.evolution.histogram <- function(starting.year){
experiment.data.tree.year <- experiment.data.tree[experiment.data.tree$STARTING_YEAR == starting.year,]
experiment.data.tree.year.uniques <- unique(experiment.data.tree.year[c("YEAR", "VARIETY", "QUALIFIED", "CHECK")])
total.varieties <- nrow(experiment.data.tree.year.uniques[experiment.data.tree.year.uniques$YEAR == starting.year,])
p <- plot_ly(data=experiment.data.tree.year.uniques, x = YEAR, color = QUALIFIED, type = "histogram")
x.axis <- list(title = "Year")
y.axis <- list(title = "Count of Varieties")
p <- p %>% layout(title = paste0("Count of Unique Varieties Tested per year. <br> Starting year: ",starting.year,
". Total Varieties: ", total.varieties),
xaxis = x.axis,
yaxis = y.axis,
barmode = "stack")
dt <- datatable(experiment.data.tree.year.uniques)
htmltools::tagList(list(as.widget(p), as.widget(dt)))
}
plot.tree.evolution.histogram(2009)
plot.tree.evolution.histogram(2010)
plot.tree.evolution.histogram(2011)
plot.tree.evolution.histogram(2012)
plot.tree.evolution.histogram(2013)
plot.tree.evolution.histogram(2014)
total.varieties.stage.1 <- sum(uniques.count.transpose$`1`)
View(experiment.data.tree)
total.varieties.not.check <- unique(experiment.data.tree["VARIETY"])
uniques.count <- group_by(experiment.data.tree, STARTING_YEAR, STAGE)
uniques.count <- summarise(uniques.count, count.varieties = n_distinct(VARIETY))
uniques.count.transpose <- dcast(uniques.count, STARTING_YEAR ~ STAGE, value.var = "count.varieties")
total.varieties.stage.1 <- sum(uniques.count.transpose$`1`)
total.varieties.not.check <- nrow(unique(experiment.data.tree["VARIETY"]))
datatable(uniques.count.transpose)
plot.tree.evolution.histogram <- function(starting.year){
experiment.data.tree.year <- experiment.data.tree[experiment.data.tree$STARTING_YEAR == starting.year,]
experiment.data.tree.year.uniques <- unique(experiment.data.tree.year[c("YEAR", "VARIETY", "QUALIFIED", "CHECK")])
total.varieties <- nrow(experiment.data.tree.year.uniques[experiment.data.tree.year.uniques$YEAR == starting.year,])
p <- plot_ly(data=experiment.data.tree.year.uniques, x = YEAR, color = QUALIFIED, type = "histogram")
x.axis <- list(title = "Year")
y.axis <- list(title = "Count of Varieties")
p <- p %>% layout(title = paste0("Count of Unique Varieties Tested per year. <br> Starting year: ",starting.year,
". Total Varieties: ", total.varieties),
xaxis = x.axis,
yaxis = y.axis,
barmode = "stack")
dt <- datatable(experiment.data.tree.year.uniques)
htmltools::tagList(list(as.widget(p), as.widget(dt)))
}
View(experiment.data.tree)
num_chicken <- 1000
num_dog <- 1000
label_train <- c(rep("chicken", num_chicken), rep("dog", num_dog))
img_train_dir <- "./data/images/"
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
load("C:/Users/jgaci/Dropbox/2016_Fall/Applied_Data_Science/Project03/Fall2016-proj3-grp6/output/feature_train.RData")
View(dat_train)
View(dat_train)
source("./lib/feature.R")
source("./lib/feature.R")
tm_feature_train <- system.time(dat_train <- feature_base("sift_features.csv"))
save(dat_train, file="./output/feature_train.RData")
View(dat_train)
source("./lib/feature.R")
tm_feature_train <- system.time(dat_train <- feature_base("sift_features.csv"))
View(dat_train)
source("./lib/feature.R")
tm_feature_train <- system.time(dat_train <- feature_base("sift_features.csv"))
View(dat_train)
source("./lib/train.R")
save(dat_train, file="./output/feature_train.RData")
source("./lib/cross_validation.R")
source("./lib/train.R")
source("./lib/cross_validation.R")
depth_values <- seq(3, 11, 2)
err_cv <- array(dim=c(length(depth_values), 2))
K <- 5  # number of CV folds
for(k in 1:length(depth_values)){
cat("k=", k, "\n")
err_cv[k,] <- cv.function(dat_train, label_train, depth_values[k], K)
}
label_train <- c(rep(0, num_chicken), rep(0, num_dog))
label_train <- c(rep(0, num_chicken), rep(1, num_dog))
for(k in 1:length(depth_values)){
cat("k=", k, "\n")
err_cv[k,] <- cv.function(dat_train, label_train, depth_values[k], K)
}
source("./lib/test.R")
source("./lib/cross_validation.R")
depth_values <- seq(3, 11, 2)
err_cv <- array(dim=c(length(depth_values), 2))
K <- 5  # number of CV folds
for(k in 1:length(depth_values)){
cat("k=", k, "\n")
err_cv[k,] <- cv.function(dat_train, label_train, depth_values[k], K)
}
save(err_cv, file="./output/err_cv.RData")
View(err_cv)
plot(depth_values, err_cv[,1], xlab="Interaction Depth", ylab="CV Error",
main="Cross Validation Error", type="n", ylim=c(0, 0.15))
points(depth_values, err_cv[,1], col="blue", pch=16)
lines(depth_values, err_cv[,1], col="blue")
arrows(depth_values, err_cv[,1]-err_cv[,2],depth_values, err_cv[,1]+err_cv[,2],
length=0.1, angle=90, code=3)
plot(depth_values, err_cv[,1], xlab="Interaction Depth", ylab="CV Error",
main="Cross Validation Error", type="n", ylim=c(0, 0.15))
points(depth_values, err_cv[,1], col="blue", pch=16)
lines(depth_values, err_cv[,1], col="blue")
arrows(depth_values, err_cv[,1]-err_cv[,2],depth_values, err_cv[,1]+err_cv[,2],
length=0.1, angle=90, code=3)
plot(depth_values, err_cv[,1], xlab="Interaction Depth", ylab="CV Error",
main="Cross Validation Error", type="n", ylim=c(0, 0.5))
points(depth_values, err_cv[,1], col="blue", pch=16)
lines(depth_values, err_cv[,1], col="blue")
arrows(depth_values, err_cv[,1]-err_cv[,2],depth_values, err_cv[,1]+err_cv[,2],
length=0.1, angle=90, code=3)
depth_best <- depth_values[which.min(err_cv[,1])]
### Train a classification model with training images
source("./lib/train.R")
source("./lib/test.R")
### Model selection with cross-validation ----
# Choosing between different values of interaction depth for GBM
source("./lib/cross_validation.R")
depth_values <- seq(3, 11, 2)
err_cv <- array(dim=c(length(depth_values), 2))
K <- 5  # number of CV folds
for(k in 1:length(depth_values)){
cat("k=", k, "\n")
err_cv[k,] <- cv.function(dat_train, label_train, depth_values[k], K)
}
