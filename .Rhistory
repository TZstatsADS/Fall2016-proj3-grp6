text = rownames(Z), mode="markers" ) %>%
layout(title = "Fisher Discriminant Analyis, taking first 2000 columns, filtered low variance")
dat.train.variance.labeled <- cbind(dat.train.variance, label.train)
lda.model <- lda(formula = val ~ .,
data = dat.train.variance.labeled,
CV = TRUE)
lda.model.table <- table(dat.train.labeled.variance$val, lda.model$class)
dat.train.variance.labeled <- cbind(dat.train.variance[1:numcol.to.use], label.train)
dat.train.variance.labeled <- cbind(dat.train.variance[,1:numcol.to.use], label.train)
lda.model <- lda(formula = val ~ .,
data = dat.train.variance.labeled,
CV = TRUE)
lda.model.table <- table(dat.train.labeled.variance$val, lda.model$class)
lda.model.table <- table(dat.train.variance.labeled$val, lda.model$class)
conCV1 <- rbind(lda.model.table[1, ]/sum(lda.model.table[1, ]), lda.model.table[2, ]/sum(lda.model.table[2, ]))
dimnames(conCV1) <- list(Actual = c("No", "Yes"), "Predicted (cv)" = c("No","Yes"))
print(round(conCV1, 3))
list.of.packages <- c("lfda", "plotly", "MASS", "matrixStats", "caret", "e1071")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(e1071)
?svm
svm.model <- svm(val ~ .,
data = dat.train.variance.labeled,
cross = 10)
svm.model$accuracies
z.labeled <- cbind(Z, label.train)
z.labeled <- cbind(Z, label.train)
svm.model <- svm(val ~ .,
data = z.labeled,
cross = 10)
svm.model$accuracies
z.labeled.fewCols <- cbind(Z[,1:2], label.train)
svm.model <- svm(val ~ .,
data = z.labeled.fewCols,
cross = 10)
svm.model$accuracies
rm(list = ls())
# Install missing packages
list.of.packages <- c("lfda", "plotly", "MASS", "matrixStats", "caret", "e1071")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(ggfortify)
library(lfda)
library(plotly)
library(MASS)
library(matrixStats)
library(caret)
library(e1071)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
knitr::opts_chunk$set(echo = TRUE, fig.width = 15)
#knitr::opts_chunk$set(out.width='750px', dpi=200)
### Specify directories
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
rm(list = ls())
# Install missing packages
list.of.packages <- c("lfda", "plotly", "MASS", "matrixStats", "caret", "e1071")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(ggfortify)
library(lfda)
library(plotly)
library(MASS)
library(matrixStats)
library(caret)
library(e1071)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
knitr::opts_chunk$set(echo = TRUE, fig.width = 15)
#knitr::opts_chunk$set(out.width='750px', dpi=200)
### Specify directories
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
img_train_dir <- "./data/images/"
num.chicken <- 1000
num.dog <- 1000
label.train <- c(rep(0, num.chicken), rep(1, num.dog))
### Construct visual feature ----
source("./lib/feature.R")
tm_feature_train <- system.time(dat.train <- feature.base("sift_features.csv"))
# Columns are images. Rows are SIFT features. Got to transpose.
# PCA
sift.pca <- prcomp(dat.train)
?prcomp
plot(cumsum(sift.pca$sdev)/sum(sift.pca$sdev),
main ="Cumulative variance captured | PCA over SIFT features",
sub = paste("Total features = ", ncol(dat.train), ", Total Images = ", nrow(dat.train)),
xlab = "# of Components",
ylab = "% of Variance")
label.train <- as.data.frame(label.train)
names(label.train) <- c("val")
label.train$val <- as.factor(label.train$val)
fda.model <- lfda(x = dat.train[,1:1900], y = label.train$val, r = 1900, metric="plain")
Z <- as.data.frame(fda.model$Z)
#names(Z) <- c(1:1900)
plot_ly(data = Z, x = Z[,1]*100000, y = Z[,2]*100000, color = label.train$val,
text = rownames(Z), mode="markers" )%>%
layout(title = "Fisher Discriminant Analyis, taking only first 1900 columns")
lowVariance <- nearZeroVar(dat.train)
dat.train.variance <- dat.train[,-lowVariance]
good.variance.ncol <- ncol(dat.train.variance)
numcol.to.use <- min(good.variance.ncol, nrow(dat.train.variance))-100
fda.model <- lfda(x = dat.train[,1:numcol.to.use], y = label.train$val, r = numcol.to.use, metric="plain")
Z <- as.data.frame(fda.model$Z)
p <- plot_ly(data = Z, x = Z[,1]*100000, y = Z[,2]*100000, color = label.train$val,
text = rownames(Z), mode="markers" ) %>%
layout(title = "Fisher Discriminant Analyis, taking first 2000 columns, filtered low variance")
p
dat.train.variance.labeled <- cbind(dat.train.variance[,1:numcol.to.use], label.train)
lda.model <- lda(formula = val ~ .,
data = dat.train.variance.labeled,
CV = TRUE)
lda.model.table <- table(dat.train.variance.labeled$val, lda.model$class)
conCV1 <- rbind(lda.model.table[1, ]/sum(lda.model.table[1, ]), lda.model.table[2, ]/sum(lda.model.table[2, ]))
dimnames(conCV1) <- list(Actual = c("No", "Yes"), "Predicted (cv)" = c("No","Yes"))
print(round(conCV1, 3))
svm.model <- svm(val ~ .,
data = dat.train.variance.labeled,
cross = 10)
svm.model$accuracies
z.labeled <- cbind(Z, label.train)
svm.model <- svm(val ~ .,
data = z.labeled,
cross = 10)
svm.model$accuracies
z.labeled.fewCols <- cbind(Z[,1:2], label.train)
svm.model <- svm(val ~ .,
data = z.labeled.fewCols,
cross = 10)
svm.model$accuracies
p <- plot_ly(data = Z, x = Z[,1]*100000, y = Z[,2]*100000, color = label.train$val,
text = rownames(Z), mode="markers" ) %>%
layout(title = "Fisher Discriminant Analyis, taking first 2000 columns, filtered low variance")
p
p <- plot_ly(data = Z, x = Z[,1]*100000, y = Z[,2]*100000, color = label.train$val,
text = rownames(Z), mode="markers" ) %>%
layout(title = "Fisher Discriminant Analyis, taking first 2000 columns, filtered low variance")
p
rm(list = ls())
# Install missing packages
list.of.packages <- c("lfda", "plotly", "MASS", "matrixStats", "caret", "e1071")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(ggfortify)
library(lfda)
library(plotly)
library(MASS)
library(matrixStats)
library(caret)
library(e1071)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
knitr::opts_chunk$set(echo = TRUE, fig.width = 12)
#knitr::opts_chunk$set(out.width='750px', dpi=200)
### Specify directories
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
img_train_dir <- "./data/images/"
num.chicken <- 1000
num.dog <- 1000
label.train <- c(rep(0, num.chicken), rep(1, num.dog))
### Construct visual feature ----
source("./lib/feature.R")
tm_feature_train <- system.time(dat.train <- feature.base("sift_features.csv"))
# Columns are images. Rows are SIFT features. Got to transpose.
# PCA
sift.pca <- prcomp(dat.train)
?prcomp
plot(cumsum(sift.pca$sdev)/sum(sift.pca$sdev),
main ="Cumulative variance captured | PCA over SIFT features",
sub = paste("Total features = ", ncol(dat.train), ", Total Images = ", nrow(dat.train)),
xlab = "# of Components",
ylab = "% of Variance")
label.train <- as.data.frame(label.train)
names(label.train) <- c("val")
label.train$val <- as.factor(label.train$val)
fda.model <- lfda(x = dat.train[,1:1900], y = label.train$val, r = 1900, metric="plain")
Z <- as.data.frame(fda.model$Z)
#names(Z) <- c(1:1900)
plot_ly(data = Z, x = Z[,1]*100000, y = Z[,2]*100000, color = label.train$val,
text = rownames(Z), mode="markers" )%>%
layout(title = "Fisher Discriminant Analyis, taking only first 1900 columns")
lowVariance <- nearZeroVar(dat.train)
dat.train.variance <- dat.train[,-lowVariance]
good.variance.ncol <- ncol(dat.train.variance)
numcol.to.use <- min(good.variance.ncol, nrow(dat.train.variance))-100
fda.model <- lfda(x = dat.train[,1:numcol.to.use], y = label.train$val, r = numcol.to.use, metric="plain")
Z <- as.data.frame(fda.model$Z)
p <- plot_ly(data = Z, x = Z[,1]*100000, y = Z[,2]*100000, color = label.train$val,
text = rownames(Z), mode="markers" ) %>%
layout(title = "Fisher Discriminant Analyis, taking first 2000 columns, filtered low variance")
p
dat.train.variance.labeled <- cbind(dat.train.variance[,1:numcol.to.use], label.train)
lda.model <- lda(formula = val ~ .,
data = dat.train.variance.labeled,
CV = TRUE)
lda.model.table <- table(dat.train.variance.labeled$val, lda.model$class)
conCV1 <- rbind(lda.model.table[1, ]/sum(lda.model.table[1, ]), lda.model.table[2, ]/sum(lda.model.table[2, ]))
dimnames(conCV1) <- list(Actual = c("No", "Yes"), "Predicted (cv)" = c("No","Yes"))
print(round(conCV1, 3))
svm.model <- svm(val ~ .,
data = dat.train.variance.labeled,
cross = 10)
svm.model$accuracies
z.labeled <- cbind(Z, label.train)
svm.model <- svm(val ~ .,
data = z.labeled,
cross = 10)
svm.model$accuracies
z.labeled.fewCols <- cbind(Z[,1:2], label.train)
svm.model <- svm(val ~ .,
data = z.labeled.fewCols,
cross = 10)
svm.model$accuracies
### Specify directories
rm(list = ls())
# Install missing packages
list.of.packages <- c("lfda", "plotly", "MASS", "matrixStats", "caret", "e1071")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(lfda)
library(plotly)
library(MASS)
library(matrixStats)
library(caret)
library(e1071)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
img_train_dir <- "./data/images/"
#img_test_dir <- "./data/zipcode_test/"
### Import training images class labels ----
#label_train <- read.table("./data/zip_train_label.txt", header=F)
#label_train <- as.numeric(unlist(label_train) == "9")
num_chicken <- 1000
num_dog <- 1000
label_train <- c(rep(0, num_chicken), rep(1, num_dog))
### Construct visual feature ----
source("./lib/feature.R")
tm_feature_train <- system.time(dat_train <- feature_base("sift_features.csv"))
# Columns are images. Rows are SIFT features. Got to transpose.
save(dat_train, file="./output/feature_train.RData")
source("./lib/feature.R")
tm_feature_train <- system.time(dat_train <- feature_base("sift_features.csv"))
source("./lib/feature.R")
tm_feature_train <- system.time(dat_train <- feature.base("sift_features.csv"))
save(dat_train, file="./output/feature_train.RData")
rm(list = ls())
# Install missing packages
list.of.packages <- c("lfda", "plotly", "MASS", "matrixStats", "caret", "e1071")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(lfda)
library(plotly)
library(MASS)
library(matrixStats)
library(caret)
library(e1071)
### Specify directories
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
img_train_dir <- "./data/images/"
#img_test_dir <- "./data/zipcode_test/"
### Import training images class labels ----
#label_train <- read.table("./data/zip_train_label.txt", header=F)
#label_train <- as.numeric(unlist(label_train) == "9")
num_chicken <- 1000
num_dog <- 1000
label_train <- c(rep(0, num_chicken), rep(1, num_dog))
### Construct visual feature ----
source("./lib/feature.R")
tm_feature_train <- system.time(dat.train <- feature.base("sift_features.csv"))
# Columns are images. Rows are SIFT features. Got to transpose.
save(dat.train, file="./output/feature_train.RData")
source("./lib/train.R")
source("./lib/test.R")
source("./lib/cross_validation.R")
depth_values <- c(1)
err_cv <- array(dim=c(length(depth_values), 2))
K <- 3  # number of CV folds
for(k in 1:length(depth_values)){
cat("k=", k, "\n")
err_cv[k,] <- cv.function.JG(dat_train, label_train, depth_values[k], K)
}
save(err_cv, file="./output/err_cv.RData")
# Visualize CV results
jpeg(file = "./figs/cv_results.jpg")
plot(depth_values, err_cv[,1], xlab="Interaction Depth", ylab="CV Error",
main="Cross Validation Error", type="n", ylim=c(0, 0.5))
points(depth_values, err_cv[,1], col="blue", pch=16)
lines(depth_values, err_cv[,1], col="blue")
arrows(depth_values, err_cv[,1]-err_cv[,2],depth_values, err_cv[,1]+err_cv[,2],
length=0.1, angle=90, code=3)
dev.off()
depth_values <- c(1)
err_cv <- array(dim=c(length(depth_values), 2))
K <- 3  # number of CV folds
for(k in 1:length(depth_values)){
cat("k=", k, "\n")
err_cv[k,] <- cv.function.JG(dat.train, label.train, depth_values[k], K)
}
save(err_cv, file="./output/err_cv.RData")
#############################################
### Main execution script for experiments ###
#############################################
### Author: Jaime Gacitua (credits to Yuting Ma)
### Project 3
### ADS Spring 2016
rm(list = ls())
# Install missing packages
list.of.packages <- c("lfda", "plotly", "MASS", "matrixStats", "caret", "e1071")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(lfda)
library(plotly)
library(MASS)
library(matrixStats)
library(caret)
library(e1071)
### Specify directories
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
img_train_dir <- "./data/images/"
#img_test_dir <- "./data/zipcode_test/"
### Import training images class labels ----
#label_train <- read.table("./data/zip_train_label.txt", header=F)
#label_train <- as.numeric(unlist(label_train) == "9")
num.chicken <- 1000
num.dog <- 1000
label.train <- c(rep(0, num.chicken), rep(1, num.dog))
label.train <- as.data.frame(label.train)
names(label.train) <- c("val")
label.train$val <- as.factor(label.train$val)
### Construct visual feature ----
source("./lib/feature.R")
tm_feature_train <- system.time(dat.train <- feature.base("sift_features.csv"))
# Columns are images. Rows are SIFT features. Got to transpose.
save(dat.train, file="./output/feature_train.RData")
### Train a classification model with training images
source("./lib/train.R")
source("./lib/test.R")
### Model selection with cross-validation ----
# Choosing between different values of interaction depth for GBM
source("./lib/cross_validation.R")
#depth_values <- seq(3, 11, 2)
depth_values <- c(1)
err_cv <- array(dim=c(length(depth_values), 2))
K <- 3  # number of CV folds
for(k in 1:length(depth_values)){
cat("k=", k, "\n")
err_cv[k,] <- cv.function.JG(dat.train, label.train, depth_values[k], K)
}
save(err_cv, file="./output/err_cv.RData")
View(label.train)
#############################################
### Main execution script for experiments ###
#############################################
### Author: Jaime Gacitua (credits to Yuting Ma)
### Project 3
### ADS Spring 2016
rm(list = ls())
# Install missing packages
list.of.packages <- c("lfda", "plotly", "MASS", "matrixStats", "caret", "e1071")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(lfda)
library(plotly)
library(MASS)
library(matrixStats)
library(caret)
library(e1071)
### Specify directories
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
img_train_dir <- "./data/images/"
#img_test_dir <- "./data/zipcode_test/"
### Import training images class labels ----
#label_train <- read.table("./data/zip_train_label.txt", header=F)
#label_train <- as.numeric(unlist(label_train) == "9")
num.chicken <- 1000
num.dog <- 1000
label.train <- c(rep(0, num.chicken), rep(1, num.dog))
label.train <- as.data.frame(label.train)
names(label.train) <- c("val")
label.train$val <- as.factor(label.train$val)
### Construct visual feature ----
source("./lib/feature.R")
tm_feature_train <- system.time(dat.train <- feature.base("sift_features.csv"))
# Columns are images. Rows are SIFT features. Got to transpose.
save(dat.train, file="./output/feature_train.RData")
### Train a classification model with training images
source("./lib/train.R")
source("./lib/test.R")
### Model selection with cross-validation ----
# Choosing between different values of interaction depth for GBM
source("./lib/cross_validation.R")
#depth_values <- seq(3, 11, 2)
depth_values <- c(1)
err_cv <- array(dim=c(length(depth_values), 2))
K <- 3  # number of CV folds
for(k in 1:length(depth_values)){
cat("k=", k, "\n")
err_cv[k,] <- cv.function.JG(dat.train, label.train, depth_values[k], K)
}
save(err_cv, file="./output/err_cv.RData")
#############################################
### Main execution script for experiments ###
#############################################
### Author: Jaime Gacitua (credits to Yuting Ma)
### Project 3
### ADS Spring 2016
rm(list = ls())
# Install missing packages
list.of.packages <- c("lfda", "plotly", "MASS", "matrixStats", "caret", "e1071")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(lfda)
library(plotly)
library(MASS)
library(matrixStats)
library(caret)
library(e1071)
### Specify directories
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
img_train_dir <- "./data/images/"
#img_test_dir <- "./data/zipcode_test/"
### Import training images class labels ----
#label_train <- read.table("./data/zip_train_label.txt", header=F)
#label_train <- as.numeric(unlist(label_train) == "9")
num.chicken <- 1000
num.dog <- 1000
label.train <- c(rep(0, num.chicken), rep(1, num.dog))
label.train <- as.data.frame(label.train)
names(label.train) <- c("val")
label.train$val <- as.factor(label.train$val)
### Construct visual feature ----
source("./lib/feature.R")
tm_feature_train <- system.time(dat.train <- feature.base("sift_features.csv"))
# Columns are images. Rows are SIFT features. Got to transpose.
save(dat.train, file="./output/feature_train.RData")
### Train a classification model with training images
source("./lib/train.R")
source("./lib/test.R")
### Model selection with cross-validation ----
# Choosing between different values of interaction depth for GBM
source("./lib/cross_validation.R")
#depth_values <- seq(3, 11, 2)
depth_values <- c(1)
err_cv <- array(dim=c(length(depth_values), 2))
K <- 3  # number of CV folds
for(k in 1:length(depth_values)){
cat("k=", k, "\n")
err_cv[k,] <- cv.function.JG(dat.train, label.train, depth_values[k], K)
}
save(err_cv, file="./output/err_cv.RData")
y
label.train$val
as.matrix(label.train)
### Specify directories
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
img_train_dir <- "./data/images/"
#img_test_dir <- "./data/zipcode_test/"
### Import training images class labels ----
#label_train <- read.table("./data/zip_train_label.txt", header=F)
#label_train <- as.numeric(unlist(label_train) == "9")
num.chicken <- 1000
num.dog <- 1000
label.train <- c(rep(0, num.chicken), rep(1, num.dog))
label.train <- as.data.frame(label.train)
names(label.train) <- c("val")
#label.train$val <- as.factor(label.train$val)
### Construct visual feature ----
source("./lib/feature.R")
tm_feature_train <- system.time(dat.train <- feature.base("sift_features.csv"))
# Columns are images. Rows are SIFT features. Got to transpose.
save(dat.train, file="./output/feature_train.RData")
### Train a classification model with training images
source("./lib/train.R")
source("./lib/test.R")
### Model selection with cross-validation ----
# Choosing between different values of interaction depth for GBM
source("./lib/cross_validation.R")
#depth_values <- seq(3, 11, 2)
depth_values <- c(1)
err_cv <- array(dim=c(length(depth_values), 2))
K <- 3  # number of CV folds
for(k in 1:length(depth_values)){
cat("k=", k, "\n")
err_cv[k,] <- cv.function.JG(dat.train, label.train, depth_values[k], K)
}
save(err_cv, file="./output/err_cv.RData")
### Train a classification model with training images
source("./lib/train.R")
source("./lib/test.R")
### Model selection with cross-validation ----
# Choosing between different values of interaction depth for GBM
source("./lib/cross_validation.R")
#depth_values <- seq(3, 11, 2)
depth_values <- c(1)
err_cv <- array(dim=c(length(depth_values), 2))
K <- 3  # number of CV folds
for(k in 1:length(depth_values)){
cat("k=", k, "\n")
err_cv[k,] <- cv.function.JG(dat.train, label.train, depth_values[k], K)
}
save(err_cv, file="./output/err_cv.RData")
### Train a classification model with training images
source("./lib/train.R")
source("./lib/test.R")
### Model selection with cross-validation ----
# Choosing between different values of interaction depth for GBM
source("./lib/cross_validation.R")
#depth_values <- seq(3, 11, 2)
depth_values <- c(1)
err_cv <- array(dim=c(length(depth_values), 2))
K <- 3  # number of CV folds
for(k in 1:length(depth_values)){
cat("k=", k, "\n")
err_cv[k,] <- cv.function.JG(dat.train, label.train, depth_values[k], K)
}
save(err_cv, file="./output/err_cv.RData")
