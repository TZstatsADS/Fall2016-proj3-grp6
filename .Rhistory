img.chicken <- readImage(paste0("./data/images/",chicken.file))
img.dog
img.dog$dim
img.dog
img.dog$w
img.dog
nrow(img.dog)
ncol(img.dog)
source("./lib/feature.R")
tm_feature_train_RGB <- system.time(dat_train_RGB <- feature_RGB("./data/images/", "RGB"))
source("./lib/feature.R")
tm_feature_train_RGB <- system.time(dat_train_RGB <- feature_RGB("./data/images/", "RGB"))
source("./lib/feature.R")
tm_feature_train_RGB <- system.time(dat_train_RGB <- feature_RGB("./data/images/", "RGB"))
source("./lib/feature.R")
tm_feature_train_RGB <- system.time(dat_train_RGB <- feature_RGB("./data/images/", "RGB"))
library(EBImage)
library(fitdistrplus)
library(mixtools)
dog.file <- "dog_1000.jpg"
chicken.file <- "chicken_0001.jpg"
img.dog <- readImage(paste0("./data/images/",dog.file))
img.chicken <- readImage(paste0("./data/images/",chicken.file))
hist(img.chicken, main = chicken.file)
hist(img.dog, main = dog.file)
chicken.file <- "chicken_0049.jpg"
img.chicken <- readImage(paste0("./data/images/",chicken.file))
red.channel <- as.vector(as.array(img.chicken[,,1]))
hist(red.channel)
hist(channel)
channel <- as.vector(as.array(img.chicken[,,1]))
hist(channel)
for(i in 1:3){
channel <- as.vector(as.array(img.chicken[,,i]))
hist(channel)
}
#############################################
### Main execution script for experiments ###
#############################################
### Author: Yuting Ma
### Project 3
### ADS Spring 2016
### Specify directories
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
img_train_dir <- "./data/images/"
#img_test_dir <- "./data/zipcode_test/"
### Import training images class labels ----
#label_train <- read.table("./data/zip_train_label.txt", header=F)
#label_train <- as.numeric(unlist(label_train) == "9")
num_chicken <- 1000
num_dog <- 1000
label_train <- c(rep(0, num_chicken), rep(1, num_dog))
### Construct visual feature ----
source("./lib/feature.R")
tm_feature_train_RGB <- system.time(dat_train_RGB <- feature_RGB("./data/images/", "RGB"))
source("./lib/feature.R")
tm_feature_train_RGB <- system.time(dat_train_RGB <- feature_RGB("./data/images/", "RGB"))
source("./lib/feature.R")
tm_feature_train_RGB <- system.time(dat_train_RGB <- feature_RGB("./data/images/", "RGB"))
source("./lib/feature.R")
tm_feature_train_RGB <- system.time(dat_train_RGB <- feature_RGB("./data/images/", "RGB"))
### Construct visual feature ----
source("./lib/feature.R")
tm_feature_train_RGB <- system.time(dat_train_RGB <- feature_RGB("./data/images/", "RGB"))
source("./lib/feature.R")
tm_feature_train_RGB <- system.time(dat_train_RGB <- feature_RGB("./data/images/", "RGB"))
file <- "dog_0997.jpg"
img.file <- readImage(paste0("./data/images/",file))
for(i in 1:3){
channel <- as.vector(as.array(img.file[,,i]))
hist(channel)
}
for(i in 1:3){
channel <- as.vector(as.array(img.file[,,i]))
channel <- channel[channel < 0.99]
hist(channel)
}
for(i in 1:3){
channel <- as.vector(as.array(img.file[,,i]))
channel <- channel[channel < 0.98]
hist(channel)
}
for(i in 1:3){
channel <- as.vector(as.array(img.file[,,i]))
channel <- channel[channel < 0.95]
hist(channel)
}
#############################################
### Main execution script for experiments ###
#############################################
### Author: Yuting Ma
### Project 3
### ADS Spring 2016
### Specify directories
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
img_train_dir <- "./data/images/"
#img_test_dir <- "./data/zipcode_test/"
### Import training images class labels ----
#label_train <- read.table("./data/zip_train_label.txt", header=F)
#label_train <- as.numeric(unlist(label_train) == "9")
num_chicken <- 1000
num_dog <- 1000
label_train <- c(rep(0, num_chicken), rep(1, num_dog))
### Construct visual feature ----
source("./lib/feature.R")
tm_feature_train_RGB <- system.time(dat_train_RGB <- feature_RGB("./data/images/", "RGB"))
tm_feature_train <- system.time(dat_train <- feature_base("sift_features.csv"))
## Merge both training data
dat_train <- cbind(dat_train, dat_train_RGB)
save(dat_train, file="./output/feature_train.RData")
### Train a classification model with training images
source("./lib/train.R")
source("./lib/test.R")
### Model selection with cross-validation ----
# Choosing between different values of interaction depth for GBM
source("./lib/cross_validation.R")
#depth_values <- seq(3, 11, 2)
depth_values <- c(1)
err_cv <- array(dim=c(length(depth_values), 2))
K <- 5  # number of CV folds
for(k in 1:length(depth_values)){
cat("k=", k, "\n")
err_cv[k,] <- cv.function(dat_train, label_train, depth_values[k], K)
}
save(err_cv, file="./output/err_cv.RData")
# Visualize CV results
jpeg(file = "./figs/cv_results.jpg")
plot(depth_values, err_cv[,1], xlab="Interaction Depth", ylab="CV Error",
main="Cross Validation Error", type="n", ylim=c(0, 0.5))
points(depth_values, err_cv[,1], col="blue", pch=16)
lines(depth_values, err_cv[,1], col="blue")
arrows(depth_values, err_cv[,1]-err_cv[,2],depth_values, err_cv[,1]+err_cv[,2],
length=0.1, angle=90, code=3)
dev.off()
# Choose the best parameter value
depth_best <- depth_values[which.min(err_cv[,1])]
par_best <- list(depth=depth_best)
# train the model with the entire training set
tm_train <- system.time(fit_train <- train(dat_train, label_train, par_best))
#save(fit_train, file="./output/fit_train.RData")
### Make prediction
#tm_test <- system.time(pred_test <- test(fit_train, dat_test))
#save(pred_test, file="./output/pred_test.RData")
### Summarize Running Time
cat("Time for constructing training features=", tm_feature_train[1], "s \n")
#cat("Time for constructing testing features=", tm_feature_test[1], "s \n")
cat("Time for training model=", tm_train[1], "s \n")
#cat("Time for making prediction=", tm_test[1], "s \n")
ncol(dat_train)
### Train a classification model with training images
source("./lib/train.R")
source("./lib/test.R")
### Model selection with cross-validation ----
# Choosing between different values of interaction depth for GBM
source("./lib/cross_validation.R")
#depth_values <- seq(3, 11, 2)
depth_values <- c(1)
err_cv <- array(dim=c(length(depth_values), 2))
K <- 5  # number of CV folds
for(k in 1:length(depth_values)){
cat("k=", k, "\n")
err_cv[k,] <- cv.function(dat_train, label_train, depth_values[k], K)
}
save(err_cv, file="./output/err_cv.RData")
### Train a classification model with training images
source("./lib/train.R")
source("./lib/test.R")
### Model selection with cross-validation ----
# Choosing between different values of interaction depth for GBM
source("./lib/cross_validation.R")
#depth_values <- seq(3, 11, 2)
depth_values <- c(1)
err_cv <- array(dim=c(length(depth_values), 2))
K <- 5  # number of CV folds
for(k in 1:length(depth_values)){
cat("k=", k, "\n")
err_cv[k,] <- cv.function(dat_train, label_train, depth_values[k], K)
}
save(err_cv, file="./output/err_cv.RData")
### Train a classification model with training images
source("./lib/train.R")
source("./lib/test.R")
### Model selection with cross-validation ----
# Choosing between different values of interaction depth for GBM
source("./lib/cross_validation.R")
#depth_values <- seq(3, 11, 2)
depth_values <- c(1)
err_cv <- array(dim=c(length(depth_values), 2))
K <- 5  # number of CV folds
for(k in 1:length(depth_values)){
cat("k=", k, "\n")
err_cv[k,] <- cv.function(dat_train, label_train, depth_values[k], K)
}
save(err_cv, file="./output/err_cv.RData")
### Train a classification model with training images
source("./lib/train.R")
source("./lib/test.R")
### Model selection with cross-validation ----
# Choosing between different values of interaction depth for GBM
source("./lib/cross_validation.R")
#depth_values <- seq(3, 11, 2)
depth_values <- c(1)
err_cv <- array(dim=c(length(depth_values), 2))
K <- 5  # number of CV folds
for(k in 1:length(depth_values)){
cat("k=", k, "\n")
err_cv[k,] <- cv.function(dat_train, label_train, depth_values[k], K)
}
save(err_cv, file="./output/err_cv.RData")
#############################################
### Main execution script for experiments ###
#############################################
### Author: Yuting Ma
### Project 3
### ADS Spring 2016
### Specify directories
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
img_train_dir <- "./data/images/"
#img_test_dir <- "./data/zipcode_test/"
### Import training images class labels ----
#label_train <- read.table("./data/zip_train_label.txt", header=F)
#label_train <- as.numeric(unlist(label_train) == "9")
num_chicken <- 1000
num_dog <- 1000
label_train <- c(rep(0, num_chicken), rep(1, num_dog))
### Construct visual feature ----
source("./lib/feature.R")
tm_feature_train <- system.time(dat_train <- feature_base("sift_features.csv"))
save(dat_train, file="./output/feature_train.RData")
### Train a classification model with training images
source("./lib/train.R")
source("./lib/test.R")
### Model selection with cross-validation ----
# Choosing between different values of interaction depth for GBM
source("./lib/cross_validation.R")
#depth_values <- seq(3, 11, 2)
depth_values <- c(1)
err_cv <- array(dim=c(length(depth_values), 2))
K <- 5  # number of CV folds
for(k in 1:length(depth_values)){
cat("k=", k, "\n")
err_cv[k,] <- cv.function(dat_train, label_train, depth_values[k], K)
}
save(err_cv, file="./output/err_cv.RData")
save(dat_train, file="./output/feature_train.RData")
### Train a classification model with training images
source("./lib/train.R")
source("./lib/test.R")
### Model selection with cross-validation ----
# Choosing between different values of interaction depth for GBM
source("./lib/cross_validation.R")
#depth_values <- seq(3, 11, 2)
depth_values <- c(1)
err_cv <- array(dim=c(length(depth_values), 2))
K <- 5  # number of CV folds
for(k in 1:length(depth_values)){
cat("k=", k, "\n")
err_cv[k,] <- cv.function(dat_train, label_train, depth_values[k], K)
}
save(dat_train, file="./output/feature_train.RData")
### Train a classification model with training images
source("./lib/train.R")
source("./lib/test.R")
### Model selection with cross-validation ----
# Choosing between different values of interaction depth for GBM
source("./lib/cross_validation.R")
#depth_values <- seq(3, 11, 2)
depth_values <- c(1)
err_cv <- array(dim=c(length(depth_values), 2))
K <- 5  # number of CV folds
for(k in 1:length(depth_values)){
cat("k=", k, "\n")
err_cv[k,] <- cv.function(dat_train, label_train, depth_values[k], K)
}
#############################################
### Main execution script for experiments ###
#############################################
### Author: Yuting Ma
### Project 3
### ADS Spring 2016
### Specify directories
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
img_train_dir <- "./data/images/"
#img_test_dir <- "./data/zipcode_test/"
### Import training images class labels ----
#label_train <- read.table("./data/zip_train_label.txt", header=F)
#label_train <- as.numeric(unlist(label_train) == "9")
num_chicken <- 1000
num_dog <- 1000
label_train <- c(rep(0, num_chicken), rep(1, num_dog))
### Construct visual feature ----
source("./lib/feature.R")
tm_feature_train_RGB <- system.time(dat_train_RGB <- feature_RGB("./data/images/", "RGB"))
tm_feature_train <- system.time(dat_train <- feature_base("sift_features.csv"))
## Merge both training data
dat_train <- cbind(dat_train, dat_train_RGB)
save(dat_train, file="./output/feature_train.RData")
### Train a classification model with training images
source("./lib/train.R")
source("./lib/test.R")
### Model selection with cross-validation ----
# Choosing between different values of interaction depth for GBM
source("./lib/cross_validation.R")
#depth_values <- seq(3, 11, 2)
depth_values <- c(1)
err_cv <- array(dim=c(length(depth_values), 2))
K <- 5  # number of CV folds
for(k in 1:length(depth_values)){
cat("k=", k, "\n")
err_cv[k,] <- cv.function(dat_train, label_train, depth_values[k], K)
}
save(err_cv, file="./output/err_cv.RData")
# Visualize CV results
#jpeg(file = "./figs/cv_results.jpg")
plot(depth_values, err_cv[,1], xlab="Interaction Depth", ylab="CV Error",
main="Cross Validation Error", type="n", ylim=c(0, 0.5))
points(depth_values, err_cv[,1], col="blue", pch=16)
lines(depth_values, err_cv[,1], col="blue")
arrows(depth_values, err_cv[,1]-err_cv[,2],depth_values, err_cv[,1]+err_cv[,2],
length=0.1, angle=90, code=3)
#dev.off()
### Train a classification model with training images
source("./lib/train.R")
source("./lib/test.R")
### Model selection with cross-validation ----
# Choosing between different values of interaction depth for GBM
source("./lib/cross_validation.R")
#depth_values <- seq(3, 11, 2)
depth_values <- c(1, 2, 3)
err_cv <- array(dim=c(length(depth_values), 2))
K <- 5  # number of CV folds
for(k in 1:length(depth_values)){
cat("k=", k, "\n")
fold.time <- system.time(
err_cv[k,] <- cv.function(dat_train, label_train, depth_values[k], K)
)
cat("Fold Time: ", fold.time, "\n")
}
save(err_cv, file="./output/err_cv.RData")
# Visualize CV results
#jpeg(file = "./figs/cv_results.jpg")
plot(depth_values, err_cv[,1], xlab="Interaction Depth", ylab="CV Error",
main="Cross Validation Error", type="n", ylim=c(0, 0.5))
points(depth_values, err_cv[,1], col="blue", pch=16)
lines(depth_values, err_cv[,1], col="blue")
arrows(depth_values, err_cv[,1]-err_cv[,2],depth_values, err_cv[,1]+err_cv[,2],
length=0.1, angle=90, code=3)
#dev.off()
load("C:/Users/jgaci/Google Drive/2016_Fall/Applied_Data_Science/Project03/Fall2016-proj3-grp6/output/err_cv.RData")
### Train a classification model with training images
source("./lib/train.R")
source("./lib/test.R")
### Model selection with cross-validation ----
# Choosing between different values of interaction depth for GBM
source("./lib/cross_validation.R")
#depth_values <- seq(3, 11, 2)
depth_values <- c(1, 2)
err_cv <- array(dim=c(length(depth_values), 2))
K <- 5  # number of CV folds
for(k in 1:length(depth_values)){
cat("k=", k, "\n")
fold.time <- system.time(
err_cv[k,] <- cv.function(dat_train, label_train, depth_values[k], K)
)
cat("Fold Time: ", fold.time, "\n")
}
save(err_cv, file="./output/err_cv.RData")
# Visualize CV results
#jpeg(file = "./figs/cv_results.jpg")
plot(depth_values, err_cv[,1], xlab="Interaction Depth", ylab="CV Error",
main="Cross Validation Error", type="n", ylim=c(0, 0.5))
points(depth_values, err_cv[,1], col="blue", pch=16)
lines(depth_values, err_cv[,1], col="blue")
arrows(depth_values, err_cv[,1]-err_cv[,2],depth_values, err_cv[,1]+err_cv[,2],
length=0.1, angle=90, code=3)
#dev.off()
axis(1, xaxp = c(1,2,3,4), las=2)
axis(1, xaxp = c(1,2), las=2)
axis(1, xaxp = c(1,2, 3, 4, 5, 6), las=2)
axis(1, at = c(1,2), las=2)
plot(depth_values, err_cv[,1], xlab="Interaction Depth", ylab="CV Error",
main="Cross Validation Error", type="n", ylim=c(0, 0.5))
axis(1, at = c(1,2), las=2)
points(depth_values, err_cv[,1], col="blue", pch=16)
lines(depth_values, err_cv[,1], col="blue")
arrows(depth_values, err_cv[,1]-err_cv[,2],depth_values, err_cv[,1]+err_cv[,2],
length=0.1, angle=90, code=3)
plot(depth_values, err_cv[,1], xlab="Interaction Depth", ylab="CV Error",
main="Cross Validation Error", type="n", ylim=c(0, 0.5), xaxt="n")
axis(1, at = c(1,2), las=2)
points(depth_values, err_cv[,1], col="blue", pch=16)
lines(depth_values, err_cv[,1], col="blue")
arrows(depth_values, err_cv[,1]-err_cv[,2],depth_values, err_cv[,1]+err_cv[,2],
length=0.1, angle=90, code=3)
plot(depth_values, err_cv[,1], xlab="Interaction Depth", ylab="CV Error",
main="Cross Validation Error", type="n", ylim=c(0, 0.5), xaxt="n")
axis(1, at = c(1,2))
points(depth_values, err_cv[,1], col="blue", pch=16)
lines(depth_values, err_cv[,1], col="blue")
arrows(depth_values, err_cv[,1]-err_cv[,2],depth_values, err_cv[,1]+err_cv[,2],
length=0.1, angle=90, code=3)
plot(depth_values, err_cv[,1], xlab="Interaction Depth", ylab="CV Error",
main="Cross Validation Error", type="n", ylim=c(0, 0.5), xaxt="n")
axis(1, at = c(1,2,3))
points(depth_values, err_cv[,1], col="blue", pch=16)
lines(depth_values, err_cv[,1], col="blue")
arrows(depth_values, err_cv[,1]-err_cv[,2],depth_values, err_cv[,1]+err_cv[,2],
length=0.1, angle=90, code=3)
plot(depth_values, err_cv[,1], xlab="Interaction Depth", ylab="CV Error",
main="Cross Validation Error", type="n", ylim=c(0, 0.5), xaxt="n")
axis(1, at = c(1,2,3, 4, 5))
points(depth_values, err_cv[,1], col="blue", pch=16)
lines(depth_values, err_cv[,1], col="blue")
arrows(depth_values, err_cv[,1]-err_cv[,2],depth_values, err_cv[,1]+err_cv[,2],
length=0.1, angle=90, code=3)
err_cv_12 <- err_cv
depth_values <- c(1)
depth_values <- c(1,2)
cv.errors <- lapply(depth_values, function(x){
cat("Depth Value:", x, "\n")
cv.error <- cv.function(dat_train, label_train, depth_values[k], K)
return(cv.error)
} )
library(parallel)
library(parallel)
cl <- makeCluster(4)
cv.errors <- clusterApply(cl, depth_values, function(x){
cat("Depth Value:", x, "\n")
cv.error <- cv.function(dat_train, label_train, depth_values[k], K)
return(cv.error)
} )
cl <- makeCluster(2)
cv.errors <- clusterApply(cl, depth_values, function(x){
cat("Depth Value:", x, "\n")
cv.error <- cv.function(dat_train, label_train, depth_values[k], K)
return(cv.error)
} )
### Train a classification model with training images
source("./lib/train.R")
source("./lib/test.R")
### Model selection with cross-validation ----
# Choosing between different values of interaction depth for GBM
source("./lib/cross_validation.R")
#depth_values <- seq(3, 11, 2)
cl <- makeCluster(2)
cv.errors <- clusterApply(cl, depth_values, function(x){
cat("Depth Value:", x, "\n")
cv.error <- cv.function(dat_train, label_train, depth_values[k], K)
return(cv.error)
} )
depth_values <- c(3,4)
K <- 5  # number of CV folds
cv.errors <- lapply(cl, depth_values, function(x){
cat("Depth Value:", x, "\n")
cv.error <- cv.function(dat_train, label_train, depth_values[k], K)
return(cv.error)
} )
cv.errors <- lapply(depth_values, function(x){
cat("Depth Value:", x, "\n")
cv.error <- cv.function(dat_train, label_train, depth_values[k], K)
return(cv.error)
} )
cv.errors.mat <- as.matrix(cv.errors)
cv.errors.mat <- matrix(unlist(cv.errors), nrow = 2)
cv.errors.mat <- matrix(unlist(cv.errors), ncol = 2)
rbind(err_cv, cv.errors.mat)
cv.errors.mat <- matrix(unlist(cv.errors), ncol = 2, byrow = TRUE)
rbind(err_cv, cv.errors.mat)
err_cv <- rbind(err_cv, cv.errors.mat)
plot(depth_values, err_cv[,1], xlab="Interaction Depth", ylab="CV Error",
main="Cross Validation Error", type="n", ylim=c(0, 0.5), xaxt="n")
axis(1, at = c(1,2,3, 4, 5))
points(depth_values, err_cv[,1], col="blue", pch=16)
lines(depth_values, err_cv[,1], col="blue")
arrows(depth_values, err_cv[,1]-err_cv[,2],depth_values, err_cv[,1]+err_cv[,2],
length=0.1, angle=90, code=3)
plot(depth_values, err_cv[,1], xlab="Interaction Depth", ylab="CV Error",
main="Cross Validation Error", type="n", ylim=c(0, 0.5), xaxt="n")
View(err_cv)
plot(depth_values, err_cv[,1], xlab="Interaction Depth", ylab="CV Error",
main="Cross Validation Error", type="n", ylim=c(0, 0.5), xaxt="n")
depth_values <- c(1,2,3,4)
plot(depth_values, err_cv[,1], xlab="Interaction Depth", ylab="CV Error",
main="Cross Validation Error", type="n", ylim=c(0, 0.5), xaxt="n")
axis(1, at = c(1,2,3, 4))
points(depth_values, err_cv[,1], col="blue", pch=16)
lines(depth_values, err_cv[,1], col="blue")
arrows(depth_values, err_cv[,1]-err_cv[,2],depth_values, err_cv[,1]+err_cv[,2],
length=0.1, angle=90, code=3)
plot(depth_values, err_cv[,1], xlab="Interaction Depth", ylab="CV Error",
main="Cross Validation Error | Multiple depths Base Model | SIFT+RGB features ",
type="n", ylim=c(0, 0.5), xaxt="n")
axis(1, at = c(1,2,3, 4))
points(depth_values, err_cv[,1], col="blue", pch=16)
lines(depth_values, err_cv[,1], col="blue")
arrows(depth_values, err_cv[,1]-err_cv[,2],depth_values, err_cv[,1]+err_cv[,2],
length=0.1, angle=90, code=3)
jpeg(file = "./figs/cv_results_SIFT+RGB.jpg")
plot(depth_values, err_cv[,1], xlab="Interaction Depth", ylab="CV Error",
main="Cross Validation Error | Multiple depths Base Model | SIFT+RGB features ",
type="n", ylim=c(0, 0.5), xaxt="n")
axis(1, at = c(1,2,3, 4))
points(depth_values, err_cv[,1], col="blue", pch=16)
lines(depth_values, err_cv[,1], col="blue")
arrows(depth_values, err_cv[,1]-err_cv[,2],depth_values, err_cv[,1]+err_cv[,2],
length=0.1, angle=90, code=3)
dev.off()
cv.errors <- lapply(depth_values, function(x){
cv.function(dat_train, label_train, x, K)
#  cv.error <- cv.function(dat_train, label_train, x, K)
#  return(cv.error)
} )
