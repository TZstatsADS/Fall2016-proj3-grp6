plot.errors <- function(err_cv, depth_values, txt){
#jpeg(file = "./figs/cv_results_SIFT+RGB.jpg")
plot(depth_values, err_cv[,1], xlab="Interaction Depth", ylab="CV Error",
main=paste0("Cross Validation Error | Multiple depths Base Model | ", txt),
type="n", ylim=c(0, 0.5), xaxt="n")
axis(1, at = depth_values)
points(depth_values, err_cv[,1], col="blue", pch=16)
lines(depth_values, err_cv[,1], col="blue")
arrows(depth_values, err_cv[,1]-err_cv[,2],depth_values, err_cv[,1]+err_cv[,2],
length=0.1, angle=90, code=3)
#dev.off()
}
plot.errors(GBM.base, 1, "hola")
plot.errors <- function(err_cv, depth_values, txt){
#jpeg(file = "./figs/cv_results_SIFT+RGB.jpg")
plot(depth_values, err_cv[,1], xlab="Interaction Depth", ylab="CV Error",
main=paste0("Cross Validation Error | Multiple depths Base Model | ", txt),
type="n", ylim=c(0, 0.5), xaxt="n")
axis(1, at = depth_values)
points(depth_values, err_cv[,1], col="blue", pch=16)
lines(depth_values, err_cv[,1], col="blue")
arrows(depth_values, err_cv[,1]-err_cv[,2],depth_values, err_cv[,1]+err_cv[,2],
length=0.1, angle=90, code=3)
#dev.off()
}
tryGBM <- function(data.train, label.train, depth_values, K, suffix){
cv.errors <- lapply(depth_values, function(x){
cv.function(data.train, label.train, x, K)
})
cv.errors.mat <- matrix(unlist(cv.errors), ncol = 3, byrow = TRUE)
save(cv.errors.mat, file=paste0("./output/err_cv_", suffix, ".RData"))
plot.errors(cv.errors.mat, depth_values, suffix)
return(cv.errors.mat)
}
dat_train <- feature_base("sift_features.csv")
depth_values <- c(1,2,3) # depth of trees in boosted decision trees
K <- 5  # number of CV folds
suffix <- "GBM_base"
GBM.base <- tryGBM(dat_train, label_train, depth_values, K, suffix)
dat_train <- cbind(dat_train, dat_train_RGB)
depth_values <- c(1,2,3,4,5) # depth of trees in boosted decision trees
K <- 5  # number of CV folds
suffix <- "GBM_base_RGB"
GBM.base.RGB <- tryGBM(dat_train, label_train, depth_values, K, suffix)
plot.errors <- function(err_cv, depth_values, txt){
#jpeg(file = "./figs/cv_results_SIFT+RGB.jpg")
plot(depth_values, err_cv[,1], xlab="Interaction Depth", ylab="CV Error",
main=paste0("Cross Validation Error | Multiple depths Base Model | ", txt),
type="n", ylim=c(0, 0.5), xaxt="n")
axis(1, at = depth_values)
points(depth_values, err_cv[,1], col="blue", pch=16)
lines(depth_values, err_cv[,1], col="blue")
arrows(depth_values, err_cv[,1]-err_cv[,2],depth_values, err_cv[,1]+err_cv[,2],
length=0.1, angle=90, code=3)
#dev.off()
}
tryGBM <- function(data.train, label.train, depth_values, K, suffix){
cv.errors <- lapply(depth_values, function(x){
cv.function(data.train, label.train, x, K)
})
cv.errors.mat <- matrix(unlist(cv.errors), ncol = 3, byrow = TRUE)
save(cv.errors.mat, file=paste0("./output/err_cv_", suffix, ".RData"))
#  plot.errors(cv.errors.mat, depth_values, suffix)
return(cv.errors.mat)
}
dat_train <- feature_base("sift_features.csv")
depth_values <- c(1,2,3) # depth of trees in boosted decision trees
K <- 5  # number of CV folds
suffix <- "GBM_base"
GBM.base <- tryGBM(dat_train, label_train, depth_values, K, suffix)
dat_train <- cbind(dat_train, dat_train_RGB)
depth_values <- c(1,2,3) # depth of trees in boosted decision trees
K <- 5  # number of CV folds
suffix <- "GBM_base_RGB"
GBM.base.RGB <- tryGBM(dat_train, label_train, depth_values, K, suffix)
View(GBM.base)
GBM.base
unlist(GBM.base)
as.vector(GBM.base)
source("./lib/train.R")
source("./lib/test.R")
source("./lib/cross_validation.R")
gbm.base
GBM.base
source("./lib/train.R")
source("./lib/test.R")
source("./lib/cross_validation.R")
dat_train <- cbind(dat_train, dat_train_RGB)
depth_values <- c(1,2,3) # depth of trees in boosted decision trees
K <- 5  # number of CV folds
suffix <- "GBM_base_RGB"
GBM.base.RGB <- tryGBM(dat_train, label_train, depth_values, K, suffix)
GBM.base.RGB
View(cv.function)
View(cv.function)
source("./lib/cross_validation.R")
ncol(dat_)
ncol(dat_train)
dat_train <- feature_base("sift_features.csv")
dat_train <- cbind(dat_train, dat_train_RGB)
ncol(dat_train)
#dat_train <- cbind(dat_train, dat_train_RGB)
depth_values <- c(1) # depth of trees in boosted decision trees
K <- 2  # number of CV folds
suffix <- "GBM_base_RGB_1"
GBM.base.RGB.1 <- tryGBM(dat_train, label_train, depth_values, K, suffix)
source("./lib/train.R")
source("./lib/test.R")
source("./lib/cross_validation.R")
#dat_train <- cbind(dat_train, dat_train_RGB)
depth_values <- c(1) # depth of trees in boosted decision trees
K <- 2  # number of CV folds
suffix <- "GBM_base_RGB_1"
GBM.base.RGB.1 <- tryGBM(dat_train, label_train, depth_values, K, suffix)
source("./lib/cross_validation.R")
depth_values <- c(1) # depth of trees in boosted decision trees
K <- 2  # number of CV folds
suffix <- "GBM_base_RGB_1"
GBM.base.RGB.1 <- tryGBM(dat_train, label_train, depth_values, K, suffix)
GBM.base.RGB.1
tryGBM <- function(data.train, label.train, depth_values, K, suffix){
cv.errors <- lapply(depth_values, function(x){
cv.function(data.train, label.train, x, K)
})
cv.errors.mat <- matrix(unlist(cv.errors), ncol = 4, byrow = TRUE)
save(cv.errors.mat, file=paste0("./output/err_cv_", suffix, ".RData"))
#  plot.errors(cv.errors.mat, depth_values, suffix)
return(cv.errors.mat)
}
dat_train <- feature_base("sift_features.csv")
depth_values <- data.frame(depth=c(3,4,4), numtrees=c(500, 500, 1000)) # depth of trees in boosted decision trees
GBM.param <- data.frame(depth=c(3,4,4), numtrees=c(500, 500, 1000)) # depth of trees in boosted decision trees
source("./lib/cross_validation.R")
tryGBM <- function(data.train, label.train, params, K, suffix){
cv.errors <- lapply(params, function(x){
cv.function(data.train, label.train, x, K)
})
cv.errors.mat <- matrix(unlist(cv.errors), ncol = 4, byrow = TRUE)
save(cv.errors.mat, file=paste0("./output/err_cv_", suffix, ".RData"))
#  plot.errors(cv.errors.mat, depth_values, suffix)
return(cv.errors.mat)
}
GBM.base.RGB.1 <- tryGBM(dat_train, label_train, GBM.param, K, suffix)
tryGBM <- function(data.train, label.train, params, K, suffix){
cv.errors <- lapply(params, 1, function(x){
cv.function(data.train, label.train, x, K)
})
cv.errors.mat <- matrix(unlist(cv.errors), ncol = 4, byrow = TRUE)
save(cv.errors.mat, file=paste0("./output/err_cv_", suffix, ".RData"))
#  plot.errors(cv.errors.mat, depth_values, suffix)
return(cv.errors.mat)
}
GBM.base.RGB.1 <- tryGBM(dat_train, label_train, GBM.param, K, suffix)
tryGBM <- function(data.train, label.train, params, K, suffix){
cv.errors <- apply(params, 1, function(x){
cv.function(data.train, label.train, x, K)
})
cv.errors.mat <- matrix(unlist(cv.errors), ncol = 4, byrow = TRUE)
save(cv.errors.mat, file=paste0("./output/err_cv_", suffix, ".RData"))
#  plot.errors(cv.errors.mat, depth_values, suffix)
return(cv.errors.mat)
}
GBM.base.RGB.1 <- tryGBM(dat_train, label_train, GBM.param, K, suffix)
source("./lib/train.R")
source("./lib/test.R")
source("./lib/cross_validation.R")
K <- 2  # number of CV folds
suffix <- "GBM_base_RGB_1"
GBM.base.RGB.1 <- tryGBM(dat_train, label_train, GBM.param, K, suffix)
K <- 2  # number of CV folds
suffix <- "GBM_base_RGB_1"
GBM.base.RGB.1 <- tryGBM(dat_train, label_train, GBM.param, K, suffix)
GBM.base.RGB.1
ncol(dat_train)
dat_train <- cbind(dat_train, dat_train_RGB)
ncol(dat_train)
GBM.param <- data.frame(depth=c(3,4,4), numtrees=c(500, 500, 1000)) # depth of trees in boosted decision trees
K <- 2  # number of CV folds
suffix <- "GBM_base_RGB_1"
GBM.base.RGB.1 <- tryGBM(dat_train, label_train, GBM.param, K, suffix)
source("./lib/train.R")
source("./lib/test.R")
source("./lib/cross_validation.R")
#dat_train <- cbind(dat_train, dat_train_RGB)
GBM.param <- data.frame(depth=c(3,4,4), numtrees=c(500, 500, 1000)) # depth of trees in boosted decision trees
K <- 5  # number of CV folds
suffix <- "GBM_base_RGB_1"
GBM.base.RGB.1 <- tryGBM(dat_train, label_train, GBM.param, K, suffix)
GBM.base.RGB.1
plot.errors(GBM.base.RGB.1, 1, "hola")
plot.errors <- function(err_cv, params, txt){
#jpeg(file = "./figs/cv_results_SIFT+RGB.jpg")
x.axis <- 1:nrow(params)
plot(x.axis, err_cv[,1], xlab="Interaction Depth", ylab="CV Error",
main=paste0("Cross Validation Error | Multiple depths Base Model | ", txt),
type="n", ylim=c(0, 0.5), xaxt="n")
axis(1, at = 1:length.x)
points(x.axis, err_cv[,1], col="blue", pch=16)
lines(x.axis, err_cv[,1], col="blue")
arrows(x.axis, err_cv[,1]-err_cv[,2],x.axis, err_cv[,1]+err_cv[,2],
length=0.1, angle=90, code=3)
#dev.off()
}
plot.errors(GBM.base.RGB.1, 1, "hola")
plot.errors(GBM.base.RGB.1, params, "hola")
plot.errors(GBM.base.RGB.1, GBM.param, "hola")
plot.errors <- function(err_cv, params, txt){
#jpeg(file = "./figs/cv_results_SIFT+RGB.jpg")
x.axis <- 1:nrow(params)
plot(x.axis, err_cv[,1], xlab="Interaction Depth", ylab="CV Error",
main=paste0("Cross Validation Error | Multiple depths Base Model | ", txt),
type="n", ylim=c(0, 0.5), xaxt="n")
axis(1, at = x.axis)
points(x.axis, err_cv[,1], col="blue", pch=16)
lines(x.axis, err_cv[,1], col="blue")
arrows(x.axis, err_cv[,1]-err_cv[,2],x.axis, err_cv[,1]+err_cv[,2],
length=0.1, angle=90, code=3)
#dev.off()
}
plot.errors(GBM.base.RGB.1, GBM.param, "hola")
plot.errors(GBM.base.RGB.1, GBM.param, "GBM_base_RGB_1")
pca.RGB <- prcomp(dat_train, scale = TRUE)
lowVariance <- nearZeroVar(dat_train)
dat.train.variance <- dat_train[,-lowVariance]
pca.RGB <- prcomp(dat.train.variance, scale = TRUE)
library(caret)
lowVariance <- nearZeroVar(dat_train)
dat.train.variance <- dat_train[,-lowVariance]
pca.RGB <- prcomp(dat.train.variance, scale = TRUE)
View(dat_train)
lowVariance <- nearZeroVar(dat_train)
dat.train.variance <- dat_train[,-lowVariance]
pca.RGB <- prcomp(dat.train.variance)
dat_train <- feature_base("sift_features.csv")
lowVariance <- nearZeroVar(dat_train)
dat.train.variance <- dat_train[,-lowVariance]
pca.RGB <- prcomp(dat.train.variance)
dat_train <- cbind(dat_train, dat_train_RGB)
dat_train <- feature_base("sift_features.csv")
dat_train <- cbind(dat_train, dat_train_RGB)
dat_train[is.na(dat_train)] <- 0
lowVariance <- nearZeroVar(dat_train)
dat.train.variance <- dat_train[,-lowVariance]
pca.RGB <- prcomp(dat.train.variance)
summary(pca.RGB)
plot(pca.RGB)
#PCA over the dataset
dat_train <- feature_base("sift_features.csv")
dat_train <- cbind(dat_train, dat_train_RGB)
dat_train[is.na(dat_train)] <- 0
dat_train_RGB[is.na(dat_train_RGB)] <- 0
source("./lib/train.R")
source("./lib/test.R")
source("./lib/cross_validation.R")
plot.errors <- function(err_cv, params, txt){
#jpeg(file = "./figs/cv_results_SIFT+RGB.jpg")
x.axis <- 1:nrow(params)
plot(x.axis, err_cv[,1], xlab="Interaction Depth", ylab="CV Error",
main=paste0("Cross Validation Error | Multiple depths Base Model | ", txt),
type="n", ylim=c(0, 0.5), xaxt="n")
axis(1, at = x.axis)
points(x.axis, err_cv[,1], col="blue", pch=16)
lines(x.axis, err_cv[,1], col="blue")
arrows(x.axis, err_cv[,1]-err_cv[,2],x.axis, err_cv[,1]+err_cv[,2],
length=0.1, angle=90, code=3)
#dev.off()
}
tryGBM <- function(data.train, label.train, params, K, suffix){
cv.errors <- apply(params, 1, function(x){
cv.function(data.train, label.train, x, K)
})
cv.errors.mat <- matrix(unlist(cv.errors), ncol = 4, byrow = TRUE)
save(cv.errors.mat, file=paste0("./output/err_cv_", suffix, ".RData"))
#  plot.errors(cv.errors.mat, depth_values, suffix)
return(cv.errors.mat)
}
dat_train <- feature_base("sift_features.csv")
depth_values <- data.frame(depth=c(1,2,3), numtrees=c(100,100,100), pca=c(1,1,1)) # depth of trees in boosted decision trees
K <- 2  # number of CV folds
suffix <- "GBM_base_test"
GBM.base.test <- tryGBM(dat_train, label_train, depth_values, K, suffix)
source("./lib/train.R")
source("./lib/test.R")
source("./lib/cross_validation.R")
plot.errors <- function(err_cv, params, txt){
#jpeg(file = "./figs/cv_results_SIFT+RGB.jpg")
x.axis <- 1:nrow(params)
plot(x.axis, err_cv[,1], xlab="Interaction Depth", ylab="CV Error",
main=paste0("Cross Validation Error | Multiple depths Base Model | ", txt),
type="n", ylim=c(0, 0.5), xaxt="n")
axis(1, at = x.axis)
points(x.axis, err_cv[,1], col="blue", pch=16)
lines(x.axis, err_cv[,1], col="blue")
arrows(x.axis, err_cv[,1]-err_cv[,2],x.axis, err_cv[,1]+err_cv[,2],
length=0.1, angle=90, code=3)
#dev.off()
}
tryGBM <- function(data.train, label.train, params, K, suffix){
cv.errors <- apply(params, 1, function(x){
cv.function(data.train, label.train, x, K)
})
cv.errors.mat <- matrix(unlist(cv.errors), ncol = 4, byrow = TRUE)
save(cv.errors.mat, file=paste0("./output/err_cv_", suffix, ".RData"))
#  plot.errors(cv.errors.mat, depth_values, suffix)
return(cv.errors.mat)
}
dat_train <- feature_base("sift_features.csv")
depth_values <- data.frame(depth=c(1,2,3), numtrees=c(100,100,100), pca=c(1,1,1)) # depth of trees in boosted decision trees
K <- 2  # number of CV folds
suffix <- "GBM_base_test"
GBM.base.test <- tryGBM(dat_train, label_train, depth_values, K, suffix)
source("./lib/train.R")
source("./lib/test.R")
source("./lib/cross_validation.R")
plot.errors <- function(err_cv, params, txt){
#jpeg(file = "./figs/cv_results_SIFT+RGB.jpg")
x.axis <- 1:nrow(params)
plot(x.axis, err_cv[,1], xlab="Interaction Depth", ylab="CV Error",
main=paste0("Cross Validation Error | Multiple depths Base Model | ", txt),
type="n", ylim=c(0, 0.5), xaxt="n")
axis(1, at = x.axis)
points(x.axis, err_cv[,1], col="blue", pch=16)
lines(x.axis, err_cv[,1], col="blue")
arrows(x.axis, err_cv[,1]-err_cv[,2],x.axis, err_cv[,1]+err_cv[,2],
length=0.1, angle=90, code=3)
#dev.off()
}
tryGBM <- function(data.train, label.train, params, K, suffix){
cv.errors <- apply(params, 1, function(x){
cv.function(data.train, label.train, x, K)
})
cv.errors.mat <- matrix(unlist(cv.errors), ncol = 4, byrow = TRUE)
save(cv.errors.mat, file=paste0("./output/err_cv_", suffix, ".RData"))
#  plot.errors(cv.errors.mat, depth_values, suffix)
return(cv.errors.mat)
}
dat_train <- feature_base("sift_features.csv")
depth_values <- data.frame(depth=c(1,2,3), numtrees=c(100,100,100), pca=c(1,1,1)) # depth of trees in boosted decision trees
K <- 2  # number of CV folds
suffix <- "GBM_base_test"
GBM.base.test <- tryGBM(dat_train, label_train, depth_values, K, suffix)
source("./lib/train.R")
source("./lib/test.R")
source("./lib/cross_validation.R")
plot.errors <- function(err_cv, params, txt){
#jpeg(file = "./figs/cv_results_SIFT+RGB.jpg")
x.axis <- 1:nrow(params)
plot(x.axis, err_cv[,1], xlab="Interaction Depth", ylab="CV Error",
main=paste0("Cross Validation Error | Multiple depths Base Model | ", txt),
type="n", ylim=c(0, 0.5), xaxt="n")
axis(1, at = x.axis)
points(x.axis, err_cv[,1], col="blue", pch=16)
lines(x.axis, err_cv[,1], col="blue")
arrows(x.axis, err_cv[,1]-err_cv[,2],x.axis, err_cv[,1]+err_cv[,2],
length=0.1, angle=90, code=3)
#dev.off()
}
tryGBM <- function(data.train, label.train, params, K, suffix){
cv.errors <- apply(params, 1, function(x){
cv.function(data.train, label.train, x, K)
})
cv.errors.mat <- matrix(unlist(cv.errors), ncol = 4, byrow = TRUE)
save(cv.errors.mat, file=paste0("./output/err_cv_", suffix, ".RData"))
#  plot.errors(cv.errors.mat, depth_values, suffix)
return(cv.errors.mat)
}
dat_train <- feature_base("sift_features.csv")
depth_values <- data.frame(depth=c(1,2,3), numtrees=c(100,100,100), pca=c(1,1,1)) # depth of trees in boosted decision trees
K <- 2  # number of CV folds
suffix <- "GBM_base_test"
GBM.base.test <- tryGBM(dat_train, label_train, depth_values, K, suffix)
source("./lib/train.R")
source("./lib/test.R")
source("./lib/cross_validation.R")
plot.errors <- function(err_cv, params, txt){
#jpeg(file = "./figs/cv_results_SIFT+RGB.jpg")
x.axis <- 1:nrow(params)
plot(x.axis, err_cv[,1], xlab="Interaction Depth", ylab="CV Error",
main=paste0("Cross Validation Error | Multiple depths Base Model | ", txt),
type="n", ylim=c(0, 0.5), xaxt="n")
axis(1, at = x.axis)
points(x.axis, err_cv[,1], col="blue", pch=16)
lines(x.axis, err_cv[,1], col="blue")
arrows(x.axis, err_cv[,1]-err_cv[,2],x.axis, err_cv[,1]+err_cv[,2],
length=0.1, angle=90, code=3)
#dev.off()
}
tryGBM <- function(data.train, label.train, params, K, suffix){
cv.errors <- apply(params, 1, function(x){
cv.function(data.train, label.train, x, K)
})
cv.errors.mat <- matrix(unlist(cv.errors), ncol = 4, byrow = TRUE)
save(cv.errors.mat, file=paste0("./output/err_cv_", suffix, ".RData"))
#  plot.errors(cv.errors.mat, depth_values, suffix)
return(cv.errors.mat)
}
dat_train <- feature_base("sift_features.csv")
depth_values <- data.frame(depth=c(1,2,3), numtrees=c(100,100,100), pca=c(1,1,1)) # depth of trees in boosted decision trees
K <- 2  # number of CV folds
suffix <- "GBM_base_test"
GBM.base.test <- tryGBM(dat_train, label_train, depth_values, K, suffix)
source("./lib/train.R")
source("./lib/test.R")
source("./lib/cross_validation.R")
plot.errors <- function(err_cv, params, txt){
#jpeg(file = "./figs/cv_results_SIFT+RGB.jpg")
x.axis <- 1:nrow(params)
plot(x.axis, err_cv[,1], xlab="Interaction Depth", ylab="CV Error",
main=paste0("Cross Validation Error | Multiple depths Base Model | ", txt),
type="n", ylim=c(0, 0.5), xaxt="n")
axis(1, at = x.axis)
points(x.axis, err_cv[,1], col="blue", pch=16)
lines(x.axis, err_cv[,1], col="blue")
arrows(x.axis, err_cv[,1]-err_cv[,2],x.axis, err_cv[,1]+err_cv[,2],
length=0.1, angle=90, code=3)
#dev.off()
}
tryGBM <- function(data.train, label.train, params, K, suffix){
cv.errors <- apply(params, 1, function(x){
cv.function(data.train, label.train, x, K)
})
cv.errors.mat <- matrix(unlist(cv.errors), ncol = 4, byrow = TRUE)
save(cv.errors.mat, file=paste0("./output/err_cv_", suffix, ".RData"))
#  plot.errors(cv.errors.mat, depth_values, suffix)
return(cv.errors.mat)
}
dat_train <- feature_base("sift_features.csv")
depth_values <- data.frame(depth=c(1,2,3), numtrees=c(100,100,100), pca=c(1,1,1)) # depth of trees in boosted decision trees
K <- 2  # number of CV folds
suffix <- "GBM_base_test"
GBM.base.test <- tryGBM(dat_train, label_train, depth_values, K, suffix)
source("./lib/train.R")
source("./lib/test.R")
source("./lib/cross_validation.R")
plot.errors <- function(err_cv, params, txt){
#jpeg(file = "./figs/cv_results_SIFT+RGB.jpg")
x.axis <- 1:nrow(params)
plot(x.axis, err_cv[,1], xlab="Interaction Depth", ylab="CV Error",
main=paste0("Cross Validation Error | Multiple depths Base Model | ", txt),
type="n", ylim=c(0, 0.5), xaxt="n")
axis(1, at = x.axis)
points(x.axis, err_cv[,1], col="blue", pch=16)
lines(x.axis, err_cv[,1], col="blue")
arrows(x.axis, err_cv[,1]-err_cv[,2],x.axis, err_cv[,1]+err_cv[,2],
length=0.1, angle=90, code=3)
#dev.off()
}
tryGBM <- function(data.train, label.train, params, K, suffix){
cv.errors <- apply(params, 1, function(x){
cv.function(data.train, label.train, x, K)
})
cv.errors.mat <- matrix(unlist(cv.errors), ncol = 4, byrow = TRUE)
save(cv.errors.mat, file=paste0("./output/err_cv_", suffix, ".RData"))
#  plot.errors(cv.errors.mat, depth_values, suffix)
return(cv.errors.mat)
}
dat_train <- feature_base("sift_features.csv")
depth_values <- data.frame(depth=c(1,2,3), numtrees=c(100,100,100), pca=c(1,1,1)) # depth of trees in boosted decision trees
K <- 2  # number of CV folds
suffix <- "GBM_base_test"
GBM.base.test <- tryGBM(dat_train, label_train, depth_values, K, suffix)
source("./lib/train.R")
source("./lib/test.R")
source("./lib/cross_validation.R")
plot.errors <- function(err_cv, params, txt){
#jpeg(file = "./figs/cv_results_SIFT+RGB.jpg")
x.axis <- 1:nrow(params)
plot(x.axis, err_cv[,1], xlab="Interaction Depth", ylab="CV Error",
main=paste0("Cross Validation Error | Multiple depths Base Model | ", txt),
type="n", ylim=c(0, 0.5), xaxt="n")
axis(1, at = x.axis)
points(x.axis, err_cv[,1], col="blue", pch=16)
lines(x.axis, err_cv[,1], col="blue")
arrows(x.axis, err_cv[,1]-err_cv[,2],x.axis, err_cv[,1]+err_cv[,2],
length=0.1, angle=90, code=3)
#dev.off()
}
tryGBM <- function(data.train, label.train, params, K, suffix){
cv.errors <- apply(params, 1, function(x){
cv.function(data.train, label.train, x, K)
})
cv.errors.mat <- matrix(unlist(cv.errors), ncol = 4, byrow = TRUE)
save(cv.errors.mat, file=paste0("./output/err_cv_", suffix, ".RData"))
#  plot.errors(cv.errors.mat, depth_values, suffix)
return(cv.errors.mat)
}
dat_train <- feature_base("sift_features.csv")
depth_values <- data.frame(depth=c(1,2,3), numtrees=c(100,100,100), pca=c(1,1,1)) # depth of trees in boosted decision trees
K <- 2  # number of CV folds
suffix <- "GBM_base_test"
GBM.base.test <- tryGBM(dat_train, label_train, depth_values, K, suffix)
plot.errors(GBM.base.test, depth_values, "Testing PCA")
GBM.param <- data.frame(depth=c(3,3,3), numtrees=c(1000, 2000, 2500), pca=c(1,1,1)) # depth of trees in boosted decision trees
GBM.param <- data.frame(depth=c(3,3,3), numtrees=c(1000, 2000, 2500), pca=c(1,1,1)) # depth of trees in boosted decision trees
K <- 5  # number of CV folds
suffix <- "GBM_base_RGB_PCA500"
GBM.base.RGB.1 <- tryGBM(dat_train, label_train, GBM.param[1,], K, suffix)
plot.errors(GBM.base.RGB.1, GBM.param[1,], "GBM_base_RGB_PCA500")
View(GBM.base.RGB.1)
GBM.param <- data.frame(depth=c(3,3,3), numtrees=c(1000, 2000, 2500), pca=c(1,1,1)) # depth of trees in boosted decision trees
K <- 5  # number of CV folds
suffix <- "GBM_base_RGB_PCA500"
GBM.base.RGB.PCA <- tryGBM(dat_train, label_train, GBM.param[1,], K, suffix)
plot.errors(GBM.base.RGB.1, GBM.param[1,], "GBM_base_RGB_PCA500")
GBM.base.RGB.PCA
GBM.param <- data.frame(depth=c(3,3,3), numtrees=c(1000, 2000, 2500), pca=c(1,1,1)) # depth of trees in boosted decision trees
K <- 5  # number of CV folds
suffix <- "GBM_base_RGB_PCA500"
GBM.base.RGB.PCA <- tryGBM(dat_train, label_train, GBM.param[2:3,], K, suffix)
plot.errors(GBM.base.RGB.1, GBM.param, "GBM_base_RGB_PCA500")
GBM.base.RGB.PCA
install.packages(c("caret", "colorspace", "curl", "evaluate", "jsonlite", "kernlab", "mnormt", "openssl", "plotly", "proto", "R6", "reshape2", "rgeos", "shiny", "stringi"))
