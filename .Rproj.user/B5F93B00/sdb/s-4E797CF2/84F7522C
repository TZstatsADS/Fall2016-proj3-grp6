{
    "collab_server" : "",
    "contents" : "#############################################################\n### Construct visual features for training/testing images ###\n#############################################################\n\n### Author: Yuting Ma\n### Project 3\n### ADS Spring 2016\n\nfeature <- function(img_dir, img_name, data_name=NULL){\n  \n  ### Construct process features for training/testing images\n  ### Sample simple feature: Extract raw pixel values os features\n  \n  ### Input: a directory that contains images ready for processing\n  ### Output: an .RData file contains processed features for the images\n  \n  ### load libraries\n  library(\"EBImage\")\n  \n  n_files <- length(list.files(img_dir))\n  \n  ### determine img dimensions\n  img0 <-  readImage(paste0(img_dir, img_name, \"_\", 1, \".jpg\"))\n  mat1 <- as.matrix(img0)\n  n_r <- nrow(img0)\n  n_c <- ncol(img0)\n  \n  ### store vectorized pixel values of images\n  # Each row represents an image. Tutorial: Total 1289 images in training set\n  # Each column represents a pixel of the image. Tutorial: Total 256 pixels\n  \n  dat <- array(dim=c(n_files, n_r*n_c)) \n  for(i in 1:n_files){\n    img <- readImage(paste0(img_dir, img_name, \"_\", i, \".jpg\"))\n    dat[i,] <- as.vector(img)\n  }\n  \n  ### output constructed features\n  if(!is.null(data_name)){\n    save(dat, file=paste0(\"./output/feature_\", data_name, \".RData\"))\n  }\n  return(dat)\n}\n\n##### Additional feature extraction\n##### JG\n\nfeature_base <- function(filename){\n  library(readr)\n  data <- read_csv(paste0(\"./data/\", filename))\n\n    # Columns are images. Rows are SIFT features. Got to transpose.\n  data <- t(data)\n  return(data)\n}\n\nfeature_RGB <- function(img_dir, data_name){\n  \n  library(EBImage)\n  library(mixtools)\n  \n  list.of.images <- list.files(img_dir)\n  n_files <- length(list.of.images)\n\n  dat <- array(dim=c(n_files, 12), dimnames = NULL) \n\n#  for(i in 1:n_files){\n  for(i in 1:n_files){\n    img.name <- list.of.images[i]\n    image.path <- paste0(img_dir, img.name)\n    img <- readImage(image.path)\n#    cat(\"i=\", i, \", Image: \", image.path, \"\\n\")\n    \n    height <- nrow(img)\n    width <-  ncol(img) \n\n#    cat(\"Original:\",width, \", \", height, \"\\n\" )\n\n    if(width > height){\n      img <- resize(x = img, h = 128)    \n    } else{\n      img <- resize(x = img, w = 128)    \n    }\n\n    height <- nrow(img)\n    width <-  ncol(img) \n    \n#    cat(\"Resized:\",width, \", \", height, \"\\n\" )\n    \n    red.channel <- as.vector(as.array(img[,,1]))\n    red.channel <- red.channel[red.channel <= 0.95]\n    green.channel <- as.vector(as.array(img[,,2]))\n    green.channel <- green.channel[green.channel <= 0.95]\n    blue.channel <- as.vector(as.array(img[,,3]))\n    blue.channel <- blue.channel[blue.channel <= 0.95]\n    \n    \n    tryCatch({\n    \n    fitted.dist.mix.r <- normalmixEM2comp(red.channel, mu = c(0.25, 0.75), lambda = 0.2, sigsqrd = c(1,0.5),\n                                                   maxit = 100, verb = FALSE)\n    \n    fitted.dist.mix.g <- normalmixEM2comp(green.channel, mu = c(0.25, 0.75), lambda = 0.2, sigsqrd = c(1,0.5),\n                                          maxit = 100, verb = FALSE)\n    \n    fitted.dist.mix.b <- normalmixEM2comp(blue.channel, mu = c(0.25, 0.75), lambda = 0.2, sigsqrd = c(1,0.5),\n                                          maxit = 100, verb = FALSE)\n    \n    dat[i,1] <- fitted.dist.mix.r$mu[1]\n    dat[i,2] <- fitted.dist.mix.r$mu[2]\n    dat[i,3] <- fitted.dist.mix.g$mu[1]\n    dat[i,4] <- fitted.dist.mix.g$mu[2]\n    dat[i,5] <- fitted.dist.mix.b$mu[1]\n    dat[i,6] <- fitted.dist.mix.b$mu[2]\n    dat[i,7] <- fitted.dist.mix.r$sigma[1]\n    dat[i,8] <- fitted.dist.mix.r$sigma[2]\n    dat[i,9] <- fitted.dist.mix.g$sigma[1]\n    dat[i,10] <- fitted.dist.mix.g$sigma[2]\n    dat[i,11] <- fitted.dist.mix.b$sigma[1]\n    dat[i,12] <- fitted.dist.mix.b$sigma[2]\n    \n    }, \n    warning = function(w){\n      return(NULL)\n    },\n    error = function(e){\n      return(NULL)\n    },\n    finally = {}\n    )\n    \n    cat(img.name, \" value: \", dat[i,], \"\\n\")\n  }\n  \n  ### output constructed features\n  if(!is.null(data_name)){\n    save(dat, file=paste0(\"./output/feature_\", data_name, \".RData\"))\n  }\n  return(dat)\n}\n\nfeature.JG <- function(filename){\n  library(readr)\n  data <- read_csv(paste0(\"./data/\", filename))\n  data <- t(data)\n  return(data)\n}\n\n\n",
    "created" : 1477854075314.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2160845220",
    "id" : "84F7522C",
    "lastKnownWriteTime" : 1477872055,
    "last_content_update" : 1477872055,
    "path" : "C:/Users/jgaci/Google Drive/2016_Fall/Applied_Data_Science/Project03/Fall2016-proj3-grp6/lib/feature.R",
    "project_path" : "lib/feature.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}